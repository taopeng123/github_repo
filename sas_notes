stopa: pdf page 78, Chapter 3

findbeginsas                SAS begin
findstartsas                Steps to start and end SAS
findquickstart              Steps to start and end SAS
findsasstart                Steps to start and end SAS
findsample                  Sample SAS program
findif                      IF
findinput                   INPUT
findsquare                  Sqare
findlogicaloperators        Logical operators
findoperators               Logical operators
findsort                    SORT
findprint                   PRINT
findmeans                   MEANS
findcomment                 comment
findor                      OR
findand                     AND
finddo                      DO
findby                      By (same as GROUP BY in SQL)
findclass                   CLASS (same as GROUP BY in SQL)
findfreq                    FREQ (same as GROUP BY COUNT in SQL)
findfrequency               FREQ (same as GROUP BY COUNT in SQL)
findunivariate              UNIVARIATE
findnormal                  Normality
findboxplot                 boxplot
findhistogram               Histogram
findqqplot                  Quantile-Quantile plot
findprobplot                Probability plot
findbarchart                Bar chart
findbargraph                Bar chart
findplot                    Plot data

==
(findbeginsas)
SAS begin

The book recommended by Xiaoxia course:

Applied Statistics and the SAS Programming Language 5th edition
Authors: Ronald P Cody Ron Cody Ron P Cody Jeffrey K Smith

Most of this note is from this book.

All the code examples in this book (the part read) are recorded here.

==
(findstartsas)
(findquickstart)
(findsasstart)

Steps to start SAS:

1. Start "Oracle VM VirtualBox"

2. In VirtualBox, select "SAS University Edition vApp", and then select Machine > Start > Normal Start. It might take a few minutes for the virtual machine to start.

Note: When the virtual machine is running, the screen with the SAS logo is replaced with a black console screen (called the Welcome window). You can minimize this window, but do not close the Welcome window until you are ready to end your SAS session.

3. In a web browser on your local computer, enter:
   http://localhost:10080

4. From the SAS University Edition: Information Center, click Start SAS Studio.

--
Steps to end SAS:

1. Close the browser.

2. Close the black window. Then a small window pops out: Close Virtual Machine, select "Power off the machine", click "OK"

3. Close the Virtual Box window.

==
A statement end in a semicolon.

Groups of SAS statements that define your data and create a SAS data set are called a DATA step; SAS statements that requst predefined routines are called a PROC (short for PROCEDURE) step.

Terminology:

SQL      SAS
column   variable
row      observation

==
Example data set (ie, table in SQL):

-------------------------------------------
SUBJECT   GENDER                  HOMEWORK
NUMBER   (M or F)  EXAM1  EXAM2    GRADE
-------------------------------------------
10         M         80    84       A
 7         M         85    89       A
 4         F         90    86       B
20         M         82    85       B
25         F         94    94       A
14         F         88    84       C
-------------------------------------------

==
(findsample)
Sample SAS program:

DATA TEST;
	INPUT SUBJECT 1-2 GENDER $ 4 EXAM1 6-8 EXAM2 10-12
		HW_GRADE $ 14;
DATALINES;
10 M  80  84 A
7  M  85  89 A
4  F  90  86 B
20 M  82  85 B
25 F  94  94 A
14 F  88  84 C
;
PROC MEANS DATA=TEST;
RUN;

tao: positions (the 1-2 in "SUBJECT 1-2", and 1-2 is inclusive)
position: 12345678901234
    data: 10 M  80  84 A

The first four lines (tao: DATALINES is the fourth line) make up the DATA step. In this example, the DATA step begins with the word DATA and ends with the word DATALINES. Older versions of SAS software used the term CARDS instead of DATALINES.

Line 1 tells the program that we want to create a SAS data set called TEST. 

The first ariable is SUBJECT and can be found in columns 1 and 2 of the data line. The dollar sign after GENDER means that GENDER is a character (alphanumeric) variable, that is, a variable that can have letters or numbers as data values. 

The DATALINES statement says that the DATA statements are done and the next thing the program should look for are the data themselves. 

==
Right-justify your numberic data values:
  87
  42
   9
  26
   4
SAS software doesn't care whether you right-justify numeric data or not, but other statiscal programs will, and right-justification is standard.   

We specify which procedure right after the word PROC. THere are are running a procedure called MEANS. 

The RUN statement is necessary only when SAS program are run under the Display Manager. The RUN statement tells SAS that there are no more statments for the preceding procedure and to go ahead and do the calculations. If we have several PROCs in a row, we need only a single RUN statement at the end of the program. However, as a stylistic standard, we prefer to end every procedure with a RUN statement.

==
Avoid getting means for SUBJECT:

PROC MEANS DATA=TEST;
	VAR EXAM1 EXAM2;
RUN;

The VAR statment specifies on which variables to run PROC MEANS.

PROC MEANS can compute many other statistics. You can specify just which pieces you want in the PROC MEANS statement. For example:

PROC MEANS DATA=TEST N MEAN STD STDERR MAXDEC=1;
	VAR EXAM1 EXAM2;
RUN;

MAXDEC=1 means that the statistics will be rounded to one decimal place.

==
(findif)
IF

DATA EXAMPLE;
	INPUT SUBJECT GENDER $ EXAM1 EXAM2
		HW_GRADE $;
	FINAL = (EXAM1 + EXAM2) / 2;
	IF FINAL GE 0 AND FINAL LT 65 THEN GRADE='F';
	ELSE IF FINAL GE 65 AND FINAL LT 75 THEN GRADE='C';
	ELSE IF FINAL GE 75 AND FINAL LT 85 THEN GRADE='B';
	ELSE IF FINAL GE 85 THEN GRADE='A';
DATALINES;
10 M  80  84 A
7  M  85  89 A
4  F  90  86 B
20 M  82  85 B
25 F  94  94 A
14 F  88  84 C
;
PROC SORT DATA=EXAMPLE;
	BY SUBJECT;
RUN;

PROC PRINT DATA=EXAMPLE; <- tao: now the data is sorted by SUBJECT
	TITLE "Roster in Student Number Order";
	ID SUBJECT;
	VAR EXAM1 EXAM2 FINAL HW_GRADE GRADE; <- tao: see VAR in the above example
RUN;

PROC MEANS DATA=EXAMPLE N MEAN STD STDERR MAXDEC=1;
	TITLE "Descriptive Statistics";
	VAR EXAM1 EXAM2 FINAL;
RUN;

PROC FREQ DATA=EXAPLE;
	TABLES GENDER HW_GRADE GRADE;
RUN;


Output of this program:

Roster in Student Number Order

SUBJECT EXAM1 EXAM2 FINAL HW_GRADE GRADE
 4       90    86   88.0     B      A
 7       85    89   87.0     A      A
 ... ...

Descriptive Statistics

The MEANS Procedure

Variable  N   Mean   Std Dev   Std Error
EXAM1     6   86.5     5.2       2.1
EXAM2     6   87.0     3.9       1.6
FINAL     6   86.8     4.2       1.7

The FREQ Procedure

                             Cummulative   Cummulative
GENDER  Frequency  Percent    Frequency      Percent
F          3        50.00       3             50.00
M          3        50.00       6            100.00

                             Cummulative   Cummulative
HW_GRADE  Frequency  Percent    Frequency      Percent
A           3        50.00       3             50.00
B           2        33.33       5             83.33
C           1        16.67       6            100.00

                             Cummulative   Cummulative
HW_GRADE  Frequency  Percent    Frequency      Percent
A           4        66.67       4             66.67
B           2        33.33       6            100.00


==
(findinput)
INPUT

The input we saw earlier:

INPUT SUBJECT 1-2 GENDER $ 4 EXAM1 6-8 EXAM2 10-12
	HW_GRADE $ 14;

The input we saw in the above example(notice that there are no column numbers following the variable names):

INPUT SUBJECT GENDER $ EXAM1 EXAM2
	HW_GRADE $;

This form of an INPUT statement (no numbers) is called list input. To use this form of INPUT, the data values must be separated by one or more blanks. If you use one of the other possible delmiters, you need to modify the program acoordingly. In this way, we have to make special provisions for missing values. We can use a period to represent the missing value:

10 M . 84 A

==
(findsquare)
Sqare of B: B**2

==
(findlogicaloperators)
(findoperators)

Logical operators:

Expression  Symbol
    EQ        =
    LT        <
    LE        <=
    GT        >
    GE        >=
    NE        ^=
    NOT       ^

==
(findsort)
SORT

PROC SORT DATA=EXAMPLE;
	BY GENDER SUBJECT;
RUN;

==
(findprint)
PRINT

PROC PRINT DATA=EXAMPLE; 
	TITLE "Roster in Student Number Order";
	ID SUBJECT;
	VAR EXAM1 EXAM2 FINAL HW_GRADE GRADE; 
RUN;

The PRINT procedure is used to list the data values in a SAS data set. We have followed our PROC PRINT statement with three statements that supply information to the procedure. These are the TITLE, ID, and VAR statements.

The words following TITLE are placed in single or double quotes and will be printed across the top of each of the SAS output pages. The ID variable, SUBJECT in this case, will cause the program to print the variable SUBJECT in the first column of the report, omitting the column labeled OBS, which the program will print when an ID variable is absent.

As with many SAS procedures, the supplymentary statements following a PROC can be placed in any order.

--
To only print the first five rows of data:  

proc print data=cigarettes (obs=5); 
run;

==
(findmeans)
MEANS

PROC MEANS DATA=EXAMPLE N MEAN STD STDERR MAXDEC=1;
	TITLE "Descriptive Statistics";
	VAR EXAM1 EXAM2 FINAL;
RUN;

proc means data=cigarettes mean stddev min q1 median q3 max maxdec=3; 
var tar; 
run;

==
(findcomment)
comment

Two ways of comments:

1. Begin with * and end with ;
   
   *Hello how are you
    I am fine
    Thank you;

2. Begin with /* and end with */    
   
   /* Hello how are you
      I am fine
      Thank you */

==
(findor)
(findand)
(finddo)
OR, AND, DO

This is an example on using or statements (and and statements) and do statements in the data statement.  

data cars; 
input model $ year make $ seats color $; 
if year lt 1975 then status='classic'; 
if model='Corvette' or model='Camaro' then make='Chevrolet'; 
if model='Miata' then do;  
	make='Mazda';  
	seats=2; 
end; 
cards; 
Corvette 1955 . 2 black 
XJ6 1995 Jaguar 2 teal 
Mustang 1966 Ford 4 red 
Miata 2002 . . silver 
CRX 2001 Honda 2 black 
Camaro 2000 . 4 red ;  

proc print data=cars; 
title "Our Complicated Car List"; 
id model; 
run; 

==
(findby)
By (same as GROUP BY in SQL)

Run PROC MEANS for each value of GENDER. 
Remember to always sort the data set first by the same BY variable:

PROC SORT DATA=HTWT;
	BY GENDER;
RUN;

PROC MEANS DATA=HTWT N MEAN STD MAXDEC=2;
	BY GENDER;
	VAR HEIGHT WEIGHT;
RUN;


==
(findclass)
CLASS (same as GROUP BY in SQL)

An alternative to using a BY statement is the use of a CLASS statement. 

The advantage of using a CLASS statement is that you do NOT hae to sort the data set first. On the downside, use of a CLASS statement requires considerably more memory than a BY statment.

PROC MEANS DATA=HTWT N MEAN STD MAXDEC=2;
	CLASS GENDER;
	VAR HEIGHT WEIGHT;
RUN;

==
(findfreq)
(findfrequency)
FREQ (same as GROUP BY COUNT in SQL)

The following is same as in SQL:
SELECT COUNT(1) FROM EXAPLE
GROUP BY GENDER HW_GRADE GRADE;


PROC FREQ DATA=EXAPLE;
	TABLES GENDER HW_GRADE GRADE;
RUN;

A slash means an option. We do not want the cumulative statiscs printed:

PROC FREQ DATA=EXAPLE;
	TABLES GENDER HW_GRADE GRADE/ NOCUM;
RUN;

To omit both cumulative statistics and percentages:
TABLES GENDER / NOCUM NOPERCENT;

ORDER=FREQ enables the frequency table to be arraged in frequency order:

PROC FREQ DATA=EXAPLE ORDER=FREQ; 
	TABLES GENDER HW_GRADE GRADE/ NOCUM; 
RUN;

In the above, ORDER=FREQ is procedure option, NOCUM is statement option.

==
(findunivariate)
UNIVARIATE

By default, we get the first 18 items of the list of statistics:

PROC UNIVARIATE DATA=HTWT;
	VAR HEIGHT WEIGHT;
RUN;

==
(findnormal)
(findboxplot)
Normality, boxplot:

To request, additionally, a test of normality, a stem-and-leaf plot, and a boxplot, we would add the options NORMAL and PLOT as follows:

PROC UNIVARIATE DATA=HTWT NORMAL PLOT;
	VAR HEIGHT WEIGHT;
	ID SUBJECT;
RUN;

==
(findhistogram)
Histogram

MIDPOINTS sets the numbers shown in the x-axis. 
NORMAL superimposes a normal curve on the histogram, to visually compare your distribution to a normal distribution.
INSET adds a box that can display selected statistics. (5.2) and (6.3) are formats of the number.

GOPTIONS RESET=ALL
	     FTEXT='Arial/bo'
	     CBACK=WHITE
	     COLORS=(BLACK)
	     GUNIT=PCT
	     HTEXT=2
	     HPOS=15;
PROC UNIVARIATE DATA=HTWT;
	VAR HEIGHT WEIGHT;
	HISTOGRAM HEIGHT / MIDPOINTS=60 TO 75 BY 5 NORMAL;
	INSET MEAN='Mean' (5.2)
		STD='Standard Deviation' (6.3) / FONT='Arial'
		                                 POS=NW
		                                 HEIGHT=3;
RUN;
QUIT;

==
(findqqplot)
Quantile-Quantile plot (QQ plot)

In a QQ plot, the y-axis is the variable chosen, the x-axis is the normal quantiles (eg: -1.5, -1, -0.5, 0, 0.5, 1, 1.5).

If your variable is normally distributed, the QQ plot should be a straight line.

PROC UNIVARIATE DATA=HTWT;
	VAR HEIGHT WEIGHT;
	QQPLOT HEIGHT;
RUN;
QUIT;

==
(findprobplot)
Probability plot

A probability plot for WEIGHT would be requested by the following statement:

PROBPLOT WEIGHT;

In the plot, the y-axis is the variable chosen, the x-axis is normal percentiles (eg: 5, 10, 25, 50, 75, 90, 95).

If your variable is normally distributed, the probability plot should be a straight line.

==
(findbarchart)
(findbargraph)
Bar chart

Can generate a frequency bar chart showing the same information as PROC FREQ, using PROC CHART or PROC GCHART. The procedure without the "G" is the older procedure that produces rather ugly charts.

PROC GCHART DATA=HTWT;
	VBAR GENDER;
RUN;

The term HBAR in place of VBAR will generate a chart with horizontal bars instead of the vertical bars obtained from VBAR.

Graphics options and pattern descriptions (can omit):

GOPTIONS RESET=ALL
	FTEXT='Arial/bo'
	CBACK=WHITE
	CTEXT=BLACK
	HPOS=25
	GUNIT=PCT
	HTEXT=2;
PATTERN VALUE=1 COLOR=BLACK;

The MIDPOINTS groups the height. General form of MIDPOINTS:
MIDPOINTS = start to end by interval;

PROC GCHART DATA=HTWT;
	VBAR HEIGHT / MIDPOINTS = 60 TO 74 BY 2;
RUN;

If we leave out any options when we are charting a continuous variable, PROC GCHART will use its own grouping algorithm to select the number of levels and the midpoints for the plot.

Treat the WEEK values as discrete values:
VBAR WEEK / DISCRETE;

Use EMPTY to obtain only the bar outline:

PATTERN VALUE=EMPTY COLOR=BLACK;
AXIS1 LABEL=('Department');
PROC GCHART DATA=E_MART;
	VBAR DEPT / MAXIS=AXIS1;
RUN;

To see the sales distributions of each department side by side (DOLLAR8.0 means the dollar sign and commas would be printed for the money value):

PATTERN VALUE=L2 COLOR=BLACK;
PROC GCHART DATA=E_MART;
	VBAR SALES / GROUP=DEPT MIDPOINTS=4500 TO 5500 BY 1000;
	FORMAT SALES DOLLAR8.0;
RUN;

Have the y-axis represent a sales sum rather than a frequency or count:

PROC GCHART DATA=E_MART;
	VBAR YEAR / SUMVAR=SALES TYPE=SUM DISCRETE;
	FORMAT SALES DOLLAR8.;
RUN;

To see mean sales by year:

PROC GCHART DATA=E_MART;
	VBAR YEAR / SUMVAR=SALES TYPE=MEAN DISCRETE;
	FORMAT SALES DOLLAR8.;
RUN;

SUBGROUP: break the bar into either different colors or corsshatch patterns:

PATTERN1 COLOR=BLACK VALUE=X1;
PATTERN2 COLOR=BLACK VALUE=L2;

PROC GCHART DATA=E_MART;
	VBAR YEAR / SUBGROUP=DEPT
		        SUMVAR=SALES
		        TYPE=SUM
		        DISCRETE;
	FORMAT SALES DOLLAR8.;
RUN;
QUIT;

See the mean sales by YEAR and DEPT, use both GROUP and SUMVAR:

PROC GCHART DATA=E_MART;
	VBAR YEAR / GROUP=DEPT SUMVAR=SALES TYPE=SUM DISCRETE;
	FORMAT SALES DOLLAR8.;
RUN;

==
(findplot)
Plot data

Generate a scatter plot of WEIGHT (on the y-axis) versus HEIGHT (on the x-axis):

Using PROC PLOT:

PROC PLOT DATA=HTWT;
	PLOT WEIGHT*HEIGHT;
RUN;

Using PROC GPLOT:

PROC GPLOT DATA=HTWT;
	TITLE "Scatter Plot of WEIGHT by HEIGHT";
	TITLE2 "Using all the Defaults";
	PLOT WEIGHT*HEIGHT;
RUN;

Change the plotting symbols and print in black:
SYMBOL VALUE=DOT COLOR=BLACK;

SYMBOL examples: DOT, CIRCLE, SQUARE, PLUS, TRIANGLE.

Use the BY to create separate plots for males and females:

PROC SORT DATA=HTWT;
	BY GENDER;
RUN;
PROC PLOT DATA=HTWT;
	BY GENDER;
	PLOT WEITHT*HEIGHT;
RUN;

Display the data for males nad females on a single graph, with different ploting symbols:

Use PLOT:

PROC PLOT DATA=HTWT;
	PLOT WEIGHT*HEIGHT=GENDER;
RUN;

Use GPLOT:

SYMBOL1 V=CIRCLE COLOR=BLACK;
SYMBOL2 V=SQUARE COLOR=BLACK;
*** Note: SYMBOL and SYMBOL1 are equivalent;
PROC GPLOT DATA=HTWT;
	PLOT WEIGHT*HEIGHT=GENDER;
RUN;

Change the symbol: 
In PLOT:
PLOT WEIGHT*HEIGHT='*';
In GPLOT:
PLOT WEIGHT*HEIGHT=2;





































