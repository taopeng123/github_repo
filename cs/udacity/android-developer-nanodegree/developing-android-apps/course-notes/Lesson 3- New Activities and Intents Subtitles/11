I like to think of intents as envelopes each one includes who, or in this case, which component you want it delivered to. And there's room for a small amount of data to be delivered, packaged as extras.  Primitive tuples that will be available to the application component that ultimately receives and opens this intent. So an explicit intent, explicitly specifies the name of the recipient, as you can see on this envelope. Implicit intents are a lot more interesting. Here, we don't specify the name of the class. We don't even know what it is. So, how do we indicate which activity to launch? Well, you know those stories you sometimes hear about letters with fake addresses like these that somehow still find their way to the intended recipient? Well the intent resolution system on Android, works the same way.  Finding an activity, capable of performing an action you specify on the associated data. So, rather than specifying the name of a class, you indicate an action you'd like an activity to perform, and on what data that action should be performed.  Like this, where we want to address an activity that's capable of viewing a website. And because intents can cross through application boundaries, the activity that started, may not be part of your app. So, you can include functionality like this, browsing websites or making phone calls or choosing a contact from your address book. All from within your app, without you having to implement any of it yourself.  You don't even need to know about the app that will ultimately service your request. You can find details of some of the intents supported by native apps in Common Intents page of the Android developer site.
