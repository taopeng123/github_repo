0:00:00.100,0:00:04.010
The solution to this question is ListPreference. When the setting

0:00:04.010,0:00:06.070
is tapped, it presents a list of choices as a

0:00:06.070,0:00:09.470
dialogue. When a user selects an option, it's saved into

0:00:09.470,0:00:12.645
Shared Preferences. Here are the steps to do this. Within

0:00:12.645,0:00:16.190
the pref_general.xml file we add a list preference. We give

0:00:16.190,0:00:18.970
it a title, and this maps to the string temperature

0:00:18.970,0:00:21.770
units. We also need to give it a key for

0:00:21.770,0:00:25.600
the shared preferences. And so we specify that to be units.

0:00:25.600,0:00:28.310
If there is no value in shared preferences, then it

0:00:28.310,0:00:31.950
falls back to a default value of metric. The preference

0:00:31.950,0:00:34.870
also wants to know the list of all possible values

0:00:34.870,0:00:38.370
here. The two possible values are metric or imperial. So we

0:00:38.370,0:00:41.580
pass those in as an array, into entry values. Now

0:00:41.580,0:00:44.430
these are just constants for use within the logic of our

0:00:44.430,0:00:47.600
app, these are not the user visible strings. So we

0:00:47.600,0:00:50.880
need to create entries which is an array of user visible

0:00:50.880,0:00:54.230
strings that maps to each one of these possible values. To

0:00:54.230,0:00:57.460
have the temperature unit preference show up in the settings activity,

0:00:57.460,0:00:59.970
we modify the on create method. We add this line of

0:00:59.970,0:01:02.640
code for the temperature units setting. When the user makes a

0:01:02.640,0:01:05.489
selection in the dialog, we set the preference summary to be

0:01:05.489,0:01:09.570
the new value of either metric or imperial. Here, when we

0:01:09.570,0:01:13.110
receive a high and low temperature, we read from shared preferences

0:01:13.110,0:01:16.200
to know whether the temperature should be converted to imperial units or

0:01:16.200,0:01:20.220
left as metric. Then we return the formatted string for display in

0:01:20.220,0:01:23.810
the UI. That completes the code for saving the temperature unit setting.
