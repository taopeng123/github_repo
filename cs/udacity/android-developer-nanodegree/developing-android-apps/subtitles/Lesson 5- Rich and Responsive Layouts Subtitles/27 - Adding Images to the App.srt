0:00:00.090,0:00:02.540
We're providing you with an asset drop, view the link below,

0:00:02.540,0:00:05.130
so that you can download the images and include them in

0:00:05.130,0:00:08.280
the app. When we open up the assets ZIP file, we

0:00:08.280,0:00:11.190
see that the same icon is provided at different sizes for

0:00:11.190,0:00:15.800
different resolutions. In the drawable MDPI folder, we see the assets

0:00:15.800,0:00:19.710
that will be used on an MDPI device. In the drawable

0:00:19.710,0:00:22.040
HDPI folder, we see the assets that will be used on

0:00:22.040,0:00:25.260
an HDPI device. And the same goes for the other folders.

0:00:26.380,0:00:29.000
Under the res directory copy over all the asset

0:00:29.000,0:00:32.580
folders provided in the download. Clicking on an image shows

0:00:32.580,0:00:34.770
a preview of it and the size and pixels

0:00:34.770,0:00:37.580
is also shown. At this time you can also remove

0:00:37.580,0:00:41.500
the old placeholder ic launcher icons. Our new launcher

0:00:41.500,0:00:45.220
icons are located in mipmap folders. These are distinct folders

0:00:45.220,0:00:48.130
from the drawable folders. If you build an APK

0:00:48.130,0:00:51.690
for a target screen resolution like HDPI, the Android asset

0:00:51.690,0:00:55.730
packaging tool, AAPT, can strip out the drawables for other resolutions

0:00:55.730,0:00:58.330
that you don't need. But if it's in the mipmap folders,

0:00:58.330,0:01:01.261
then these assets will stay in the APK regardless of the

0:01:01.261,0:01:04.190
target resolution. But when would you need an image at a

0:01:04.190,0:01:07.700
resolution different than the resolution of the device? Well, one example

0:01:07.700,0:01:11.080
is the Android launcher app, which controls the home screen as

0:01:11.080,0:01:13.830
well as the All App store. The launcher app won't use

0:01:13.830,0:01:16.741
the icon at the current density of the device, but rather

0:01:16.741,0:01:22.560
pulls a icon for the next highest resolution up. For an XXHDPI device like the

0:01:22.560,0:01:24.950
Nexus 5, normally the assets will be pulled

0:01:24.950,0:01:28.850
from the drawable XXHDPI folder. However, in this

0:01:28.850,0:01:32.620
case the launcher icon will pull the XXXHDPI

0:01:32.620,0:01:35.320
version of the launcher icon. That will make

0:01:35.320,0:01:37.860
the larger app icons appear sharper on the

0:01:37.860,0:01:42.715
all apps screen. In the code replace @drawable/ic_launcher

0:01:42.715,0:01:47.070
with @mipmap/ic_launcher because of the new location of the icons.

0:01:47.070,0:01:49.980
For the rest of the icons modify the forecast list

0:01:49.980,0:01:53.160
and the details screen to display the right weather icon

0:01:53.160,0:01:56.110
instead of the placeholder one. See the hints below in

0:01:56.110,0:01:59.470
the instructor notes. Using the helper functions we've provided in

0:01:59.470,0:02:02.260
the gist below, you can map the weather condition code

0:02:02.260,0:02:04.860
to the icon that you'll need. This is what the

0:02:04.860,0:02:07.590
app should look like when you're done with this step.

0:02:07.590,0:02:09.400
Note that there are two types of each weather

0:02:09.400,0:02:12.350
icon, a gray icon and a colored art image.

0:02:12.350,0:02:15.040
In the main forecast list we'll be using the

0:02:15.040,0:02:18.630
gray icon. However, for the today layout, we'll use the

0:02:18.630,0:02:21.650
colored icon. When you go inside the detail activity,

0:02:21.650,0:02:24.930
you'll also use the colored icon. At this time,

0:02:24.930,0:02:27.160
you can also remove any images you hard coded

0:02:27.160,0:02:30.570
into the layout XML, because they'll be populated dynamically now.
