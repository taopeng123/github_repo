0:00:00.140,0:00:03.635
Knowing the standard widget library is nice, but as someone who

0:00:03.635,0:00:08.430
was once accused as not so much recreating the wheel, as hand

0:00:08.430,0:00:11.280
machining my own nuts and bolts, I know there are times

0:00:11.280,0:00:13.990
when nothing in the tool chest will quite do the job. That's

0:00:13.990,0:00:16.470
when it's time to dive in and build you own custom

0:00:16.470,0:00:19.900
view from scratch. Now we're not going to be including any custom

0:00:19.900,0:00:22.170
views within Sunshine, but we can still take a look at how

0:00:22.170,0:00:25.240
you would build one. We'll start by creating a new class for

0:00:25.240,0:00:27.250
our view. Let's call it My View. If

0:00:27.250,0:00:29.650
you're building something from scratch, rather than modify an

0:00:29.650,0:00:32.159
existing view, it should descend from either view

0:00:32.159,0:00:36.760
itself or from surface view. View offers a light

0:00:36.760,0:00:40.820
weight, canvas-based approach, while surface view is designed

0:00:40.820,0:00:44.085
specifically to support UI elements that require rapid redraws

0:00:44.085,0:00:47.140
and/or 3D graphics, using something like Open GL.

0:00:47.140,0:00:50.660
It's perfect for views that display video or games.

0:00:50.660,0:00:53.550
Now the existing widget library is entirely view

0:00:53.550,0:00:56.610
based. So let's take that approach. The base view

0:00:56.610,0:01:01.300
class draws an empty borderless 100 by 100 pixel

0:01:01.300,0:01:04.830
box. To change that, we override the onMeasure handler,

0:01:04.830,0:01:07.160
which allows us to indicate the view size.

0:01:07.160,0:01:10.040
We'll also override onDraw, in order to draw our

0:01:10.040,0:01:13.180
own custom view content. Now if it turns out

0:01:13.180,0:01:15.810
that your view should always be an empty 100

0:01:15.810,0:01:18.690
pixel box then you're in luck. Otherwise we need to do

0:01:18.690,0:01:22.790
some work. So let's start by setting our view's size. onMeasure is

0:01:22.790,0:01:26.190
called when your view's parent is laying out it's children. As

0:01:26.190,0:01:27.970
you know, when you add a view to a layout you can

0:01:27.970,0:01:31.310
specify a specific height or width, but in most cases you'll

0:01:31.310,0:01:34.860
want to either match parent or wrap the content. When a view's on

0:01:34.860,0:01:38.270
measure is called by its parent layout, it asks, how much space

0:01:38.270,0:01:41.360
will you use? And passes in how much space is available, and

0:01:41.360,0:01:43.110
whether the view will be given exactly that much

0:01:43.110,0:01:46.630
space, or at most that much space using these parameters.

0:01:46.630,0:01:49.650
You can decode those parameters like this. And that'll allow

0:01:49.650,0:01:53.970
you to obtain the size and the mode for your

0:01:53.970,0:01:58.780
height and width specifications. In this example we're demonstrating just

0:01:58.780,0:02:00.820
for the height parameter, but it works the same for

0:02:00.820,0:02:04.000
width. We can then use the decoded mode parameter to

0:02:04.000,0:02:06.940
find out what size we should set our view to.

0:02:06.940,0:02:09.970
If the returned mode is exactly, the view will be placed

0:02:09.970,0:02:12.740
into an area of exactly that size. You'll be passed that

0:02:12.740,0:02:15.460
value if the layout has specified a specific size or if

0:02:15.460,0:02:19.030
the view has been asked to fill the parent. In either case,

0:02:19.030,0:02:22.370
it's best practice to simply return the value passed in, unless

0:02:22.370,0:02:25.160
that value is below your views minimum size, in which case

0:02:25.160,0:02:27.740
you can return the minimum value and rely on the parent

0:02:27.740,0:02:32.910
layout to crop or scroll as necessary. Another alternative is AT_MOST. This

0:02:32.910,0:02:35.750
indicates that your view can define its own size, up to the

0:02:35.750,0:02:39.300
size given. This is typically the case for views set to wrap

0:02:39.300,0:02:41.790
content, where the view should be as wide as it needs to

0:02:41.790,0:02:45.100
be to display its content, but no wider than that. And of

0:02:45.100,0:02:47.900
course all of that's provided that it still fits within the parent

0:02:47.900,0:02:50.280
container as indicated by the size

0:02:50.280,0:02:52.260
parameter. Now we've just finished calculating

0:02:52.260,0:02:54.580
all of that for the height parameter and you'd need to do

0:02:54.580,0:02:58.060
exactly the same thing again for width. Once you've done that and

0:02:58.060,0:03:01.150
determined the size of your control, you have to call

0:03:01.150,0:03:05.050
the setMeasuredDimension method. Here you pass in your width and

0:03:05.050,0:03:09.229
height values. If you don't call these setMeasureDimension method, your

0:03:09.229,0:03:11.050
app will as soon as your view is laid out.
