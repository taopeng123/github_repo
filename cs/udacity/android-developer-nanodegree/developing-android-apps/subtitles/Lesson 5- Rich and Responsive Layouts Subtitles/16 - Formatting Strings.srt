0:00:00.090,0:00:03.150
Currently, this is our forecast list. It looks okay, but

0:00:03.150,0:00:04.689
it would be nice if we could show the degree

0:00:04.689,0:00:08.310
symbol for these temperature values. Using this notation is best

0:00:08.310,0:00:11.580
practice. It will help the translator know how to reorder the

0:00:11.580,0:00:14.290
text and the parameters so that it fits the local

0:00:14.290,0:00:16.790
language. Now let's look at how we can use this

0:00:16.790,0:00:20.930
method to format temperatures within our app. Within the string.xml

0:00:20.930,0:00:25.400
file, we declared the format temperature string resource. We use xliff

0:00:25.400,0:00:28.250
tag to denote that this is where the decimal temperature

0:00:28.250,0:00:30.850
value will go. This is followed by the unit code

0:00:30.850,0:00:33.940
character for the degrees symbol. In the utility class, in

0:00:33.940,0:00:37.770
the format temperature method, we can use this string resource. Remember

0:00:37.770,0:00:40.090
that, in this method, we take in a temperature and

0:00:40.090,0:00:43.530
a user's preference for metric or imperial. Then, we return

0:00:43.530,0:00:47.140
the converted temperature. We're going to modify this method so that

0:00:47.140,0:00:50.460
it also returns the formatted string with a degrees symbol after

0:00:50.460,0:00:53.240
the value. In order to do this. We need to past

0:00:53.240,0:00:56.270
in a context. From the context we can get access to the

0:00:56.270,0:01:00.310
string resource ID that we declared earlier. Then we passed in any

0:01:00.310,0:01:03.560
additional parameters for that string template. In this case we only have

0:01:03.560,0:01:06.810
one parameters so we pass in the temperature value. Then this

0:01:06.810,0:01:10.350
fully formatted string gets returned to the caller. This method is used

0:01:10.350,0:01:13.290
in the forecast list, as well in the detail page. So we

0:01:13.290,0:01:15.740
also had to update the code there so that it would compile

0:01:15.740,0:01:19.120
with this new parameter. And this is what the app looks like after

0:01:19.120,0:01:22.020
the change. Go ahead and make the change in your code to add a

0:01:22.020,0:01:24.160
string resource for displaying temperature in

0:01:24.160,0:01:26.940
degrees. Check this box when you're done.

0:01:26.940,0:01:29.620
And remember, use this notation going forward

0:01:29.620,0:01:31.360
for when you need to format strings
