0:00:00.140,0:00:03.920
To build up this list item we created a horizontal linear layout with three

0:00:03.920,0:00:08.470
children. The first child is an image view. The second child is a vertical

0:00:08.470,0:00:11.980
linear layout composed of two text views stacked on top of each other.

0:00:11.980,0:00:15.200
The third child is the same. It's a vertical linear layout composed of

0:00:15.200,0:00:17.480
the two temperature text views stacked on top of each other.

0:00:17.480,0:00:20.370
Now you might be wondering why we didn't use a relative layout.

0:00:20.370,0:00:24.354
Because that would give us less layers of hierarchy. Well, relative layouts

0:00:24.354,0:00:29.100
are good if you want to specify that one view should be to the right of another,

0:00:29.100,0:00:33.545
or on top of another view. Relative layouts are also good if you want a view to

0:00:33.545,0:00:37.923
be aligned to the parents left, top, right or bottom. But it's harder in this

0:00:37.923,0:00:42.042
case to center these two text views within the vertical height allocated by this

0:00:42.042,0:00:46.190
image view. It's easier with the linear layout here and here, so if the image

0:00:46.190,0:00:50.140
was any taller, these two text views would still stay vertically centered. And

0:00:50.140,0:00:53.860
this is what it looks like in the Device Preview within Android Studio.

0:00:53.860,0:00:56.530
I want to point out one thing about this horizontal linear layout,

0:00:56.530,0:00:59.880
which has three children. The image view, the vertical linear layout, and

0:00:59.880,0:01:04.483
the other vertical linear layout. The second child actually has a width of zero

0:01:04.483,0:01:09.110
DP but a weight of one. That means that any horizontal space that's not taken up

0:01:09.110,0:01:14.470
by other children will be distributed among views that have assigned weights. So

0:01:14.470,0:01:18.430
if we look at this third child, it has a width of wrap content and

0:01:18.430,0:01:21.000
a weight of zero. If we gave it a weight of one,

0:01:21.000,0:01:25.070
then it would stretch out like this. Basically the icon is a fixed width, and

0:01:25.070,0:01:28.560
then the remaining horizontal space is divided among these two children.

0:01:28.560,0:01:31.970
Since they both have a weight one, it's distributed equally. But if you look at

0:01:31.970,0:01:35.840
the wire frames, these temperature views are actually aligned to the right. So

0:01:35.840,0:01:39.930
all we need is for the width to be wrap content, and for the weight to be zero.

0:01:39.930,0:01:43.690
Then any remaining horizontal space will be assigned to this middle element,

0:01:43.690,0:01:46.480
with a weight of one. And this is the code for the xml layout.

0:01:46.480,0:01:50.770
We have a linear layout in horizontal orientation. The width is match parent to

0:01:50.770,0:01:54.590
match the width of the screen, and each list item has wrap content on its

0:01:54.590,0:01:58.230
height. But it does have a minimum height at least of this attribute,

0:01:58.230,0:02:02.140
list preferred item height. We specify gravity to be center vertical so that

0:02:02.140,0:02:05.790
all of its children are vertically centered within it. We also specify a little

0:02:05.790,0:02:10.120
bit of padding. Inside of it, we add an image view, which has wrap content for

0:02:10.120,0:02:14.630
height and width. And we specify the source as this placeholder drawable.

0:02:14.630,0:02:17.720
Next we have the vertical linear layout, where the width is zero DP and

0:02:17.720,0:02:21.643
the weight is one. We specify a little bit of padding between this view and

0:02:21.643,0:02:24.060
the icon beside it. Within the linear layout,

0:02:24.060,0:02:28.390
we have the date_textview as well as the forecast_textview. Beside that,

0:02:28.390,0:02:31.930
we have another vertical linear layout with the high temperature_textview and

0:02:31.930,0:02:34.090
the low temperature_textview. And that's it.
