0:00:00.270,0:00:04.740
To build out our UI, let's start with[br]the wire frames for the main activity.

0:00:04.740,0:00:09.000
It displays a list of forecasts[br]where each item contains an icon,

0:00:09.000,0:00:14.630
a date, weather description, as well as[br]high and low temperatures for that day.

0:00:14.630,0:00:18.190
Since today's weather is probably[br]most relevant to the user,.

0:00:18.190,0:00:22.036
We give more prominence to it as the[br]list item compared to the other dates.

0:00:22.036,0:00:25.277
We'll start off by building the list[br]item layout for future dates because

0:00:25.277,0:00:29.030
it's simpler and then afterwards we'll[br]come back to do the today layout.

0:00:29.030,0:00:33.130
In the current implementation[br]the list item forecast layout xml.

0:00:33.130,0:00:36.090
Is a horizontal,[br]linear layout of four text views.

0:00:36.090,0:00:39.480
We'll need to modify the layout so[br]that it looks like this wire frame.

0:00:39.480,0:00:40.110
We should divide and

0:00:40.110,0:00:43.590
conquer until we can use the view group[br]layouts that we're familiar with.

0:00:43.590,0:00:46.480
Can you imagine how you'd break down[br]this UI into components that you

0:00:46.480,0:00:47.129
know how to build?

0:00:48.680,0:00:51.840
As a hint,[br]what if I draw these separators here?

0:00:51.840,0:00:54.690
Within those elements,[br]can you find a way to break it down

0:00:54.690,0:00:57.540
even further with view[br]groups you're familiar with?

0:00:57.540,0:01:00.270
You'll need nested view groups[br]which means view groups

0:01:00.270,0:01:02.170
with children view groups.

0:01:02.170,0:01:06.050
By the way, use the view id names that[br]we provide in the instructor notes below

0:01:06.050,0:01:07.770
so that your code will match ours.

0:01:07.770,0:01:10.510
To verify that the layout[br]is being built correctly,

0:01:10.510,0:01:13.280
hard code some text[br]values into the fields.

0:01:13.280,0:01:17.200
Such as tomorrow for the date, or[br]clear for the weather condition.

0:01:17.200,0:01:21.320
For images, we can specify a placeholder[br]drawable called ic_launcher.

0:01:21.320,0:01:25.030
It's named this way because[br]it's the launcher icon.

0:01:25.030,0:01:28.650
Which is also known as the app icon and[br]this is already included in our app.

0:01:28.650,0:01:31.235
We'll be getting to the rest[br]of the weather icons for

0:01:31.235,0:01:33.060
our app later in this lesson.

0:01:33.060,0:01:35.020
If you want to see what[br]this layout looks like,

0:01:35.020,0:01:37.910
you can click on the design[br]pane to see a preview of it.

0:01:37.910,0:01:41.060
On the right we see a component tree[br]listing out the different views.

0:01:41.060,0:01:45.100
We can also see for a given view what[br]the properties are and their values.

0:01:45.100,0:01:48.130
We can change the orientation of[br]the device that you're previewing.

0:01:48.130,0:01:52.900
You can also select different devices,[br]such as Nexus 7 or Nexus 10.

0:01:52.900,0:01:56.240
You can also preview multiple[br]devices at the same time.

0:01:56.240,0:01:59.570
As you build out your layout for this[br]task, don't worry about the font color

0:01:59.570,0:02:02.680
or font size, or[br]any other visual details until later.

0:02:03.690,0:02:06.970
After you compile and run,[br]the app should look something like this.

0:02:06.970,0:02:09.680
Every list item has the same dummy data.

0:02:09.680,0:02:10.889
When you change the layout,

0:02:10.889,0:02:15.280
it will actually cause a crash in your[br]app because your code previously assumed

0:02:15.280,0:02:18.320
that this list item layout[br]only had one text view.

0:02:18.320,0:02:21.240
So you'll need to go to[br]the ForecastAdapter.java file.

0:02:21.240,0:02:23.840
And comment out the lines of[br]code in the bindview method.

0:02:23.840,0:02:26.520
We're going to fix this[br]method in a later video.
