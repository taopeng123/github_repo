0:00:00.470,0:00:02.400
Before we go ahead and build a content provider

0:00:02.400,0:00:05.280
you wouldn't be out of line to ask, well why.

0:00:07.250,0:00:09.060
The simplest answer is that it allows you to

0:00:09.060,0:00:12.540
share your data safely and efficiently across app boundaries by

0:00:12.540,0:00:15.520
abstracting the underlying data source, be it SQLite like

0:00:15.520,0:00:19.080
this or files or really anything else. So that other

0:00:19.080,0:00:21.870
apps can access it without really needing to understand how

0:00:21.870,0:00:25.650
you stored it. In fact, the calendar, SMS, and contacts

0:00:25.650,0:00:29.620
APIs work that way, using shared content providers.

0:00:29.620,0:00:31.780
We're going to share our weather database later, but if

0:00:31.780,0:00:34.370
you're not planning to expose your app's data, you're

0:00:34.370,0:00:38.160
probably thinking you can skip this bit, right? Well,

0:00:38.160,0:00:40.770
almost, in a lot of cases you could,

0:00:40.770,0:00:44.970
but really shouldn't. For example, in Sunshine we're using

0:00:44.970,0:00:47.380
SQ Lite. But you could be storing data in

0:00:47.380,0:00:50.680
files, dynamic run-time data or even just a different

0:00:50.680,0:00:55.040
database library. By using content providers, it's easier for

0:00:55.040,0:00:57.380
you to potentially switch out the data source and

0:00:57.380,0:00:59.740
much easier for someone other than you to manage

0:00:59.740,0:01:02.410
the UI layer code without them having to understand

0:01:02.410,0:01:05.459
the depths of your data storage implementation. On the

0:01:05.459,0:01:09.070
UI layer, it's a generic mechanism that returns cursors.

0:01:09.070,0:01:12.270
The same of those returned by SQLite databases. So,

0:01:12.270,0:01:15.690
if your data layer implementation changes, then your content provider

0:01:15.690,0:01:19.390
is effected. Still, it's just you writing the code right

0:01:19.390,0:01:21.520
now and that's a lot of boilerplate for the sake of

0:01:21.520,0:01:24.690
following a neat design pattern. Well, keep in mind that

0:01:24.690,0:01:27.730
as far as the framework is concerned, all data is handled

0:01:27.730,0:01:31.027
through content providers. So, if you want to interact with

0:01:31.027,0:01:33.790
anything outside of your app, such as sending data to a

0:01:33.790,0:01:37.770
widget or returning search results from the newer app, you'll need

0:01:37.770,0:01:40.770
a content provider for that too. In fact, that's how the

0:01:40.770,0:01:43.760
Google play store and Gmail widgets work. As well as the

0:01:43.760,0:01:47.920
ability to get search results from Google Play. Similarly, there's a bunch

0:01:47.920,0:01:51.960
of APIs designed to optimize the process of synching and querying data,

0:01:51.960,0:01:56.580
and updating UI accordingly. And all of them also expect content providers.

0:02:00.490,0:02:03.950
That includes sync adapters and cursor loaders. Which make your

0:02:03.950,0:02:07.140
app able to efficiently sync with your server, load data in

0:02:07.140,0:02:10.360
your UI layer, and which include built in content observers that

0:02:10.360,0:02:14.167
will update your UI automatically when the underlying data changes. You

0:02:14.167,0:02:17.680
could, of course, build all of that yourself but at

0:02:17.680,0:02:20.350
a certain point the advantage you gained by not writing a

0:02:20.350,0:02:23.280
content provider to begin with is lost in the process of

0:02:23.280,0:02:26.900
having to recreate all of the useful clusters that utilize it.

0:02:26.900,0:02:30.160
We'll take a look at publishing your content provider and using Lotus

0:02:30.160,0:02:33.980
to access it efficiently later in this lesson. And we'll explore sync adapters

0:02:33.980,0:02:37.820
in lesson six when we look at doing efficient background updates. But

0:02:37.820,0:02:41.390
first, Dan is going to show you how to actually build a content provider.
