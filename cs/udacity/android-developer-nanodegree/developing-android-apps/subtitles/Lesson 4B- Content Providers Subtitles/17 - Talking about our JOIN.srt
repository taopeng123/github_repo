0:00:00.260,0:00:02.580
When we first defined our tables,

0:00:02.580,0:00:06.320
we defined the relationship between[br]them in terms of constraints.

0:00:06.320,0:00:08.880
I'm going to show how we implemented[br]that relationship into our

0:00:08.880,0:00:10.140
query using a JOIN.

0:00:11.420,0:00:13.900
This JOIN allows us to[br]query the Weather table for

0:00:13.900,0:00:17.450
values from a specific location setting.

0:00:17.450,0:00:21.170
In Sunshine's case,[br]the user sets this in Preferences.

0:00:21.170,0:00:24.710
You'll notice that there's[br]an SQLiteQueryBuilder class variable at

0:00:24.710,0:00:26.240
the top of WeatherProvider.

0:00:26.240,0:00:29.940
As you might guess,[br]this class helps construct queries and

0:00:29.940,0:00:31.700
is actually used as the basis for

0:00:31.700,0:00:35.730
the query functions you've already[br]used in the SQLite database class.

0:00:35.730,0:00:40.350
We initialize the SQLiteQueryBuilder[br]in the static constructor of the class,

0:00:40.350,0:00:43.305
describing the join between both tables.

0:00:43.305,0:00:47.720
SetTables fills out the content in[br]the from part of the SQL query.

0:00:47.720,0:00:52.890
Note, since both tables have[br]a field with an underscore ID,

0:00:52.890,0:00:56.840
we must explicitly use the table[br]name in order to disambiguate

0:00:56.840,0:00:59.940
which ID we are talking[br]about in the join.

0:00:59.940,0:01:02.050
Then we define the selection.

0:01:02.050,0:01:06.090
The selection is defined using[br]the question mark replacement syntax.

0:01:06.090,0:01:09.830
The selection parameters[br]will replace these values.

0:01:09.830,0:01:13.015
As you can see,[br]our selection has two parameters,

0:01:13.015,0:01:16.150
a location setting and a date.

0:01:16.150,0:01:19.170
Then we have a function to get[br]the weather by location setting using

0:01:19.170,0:01:21.010
the same query builder.

0:01:21.010,0:01:25.870
Note that we fetch the parameters from[br]the URI and built a string array so

0:01:25.870,0:01:28.310
that they can be[br]substituted into our query.

0:01:28.310,0:01:32.340
We do that for both of the queries[br]that we're creating this way.

0:01:32.340,0:01:36.411
Finally, we added the functions into the[br]query routine of the content provider,

0:01:36.411,0:01:40.370
for both WEATHER_WITH_LOCATION_AND_DATE[br]and WEATHER_WITH_LOCATION
