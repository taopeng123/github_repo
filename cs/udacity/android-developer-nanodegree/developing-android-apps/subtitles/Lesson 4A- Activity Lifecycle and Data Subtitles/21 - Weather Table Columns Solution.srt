0:00:00.250,0:00:02.940
All right, let's see how we did.

0:00:02.940,0:00:08.452
If you checked record ID, weather[br]condition ID, minimum temperature,

0:00:08.452,0:00:13.003
wind speed, humidity,[br]maximum temperature,

0:00:13.003,0:00:16.920
date, weather direction and[br]pressure, you've got this right.

0:00:16.920,0:00:19.910
Now technically,[br]one could have included either date or

0:00:19.910,0:00:23.040
time, as time includes date.

0:00:23.040,0:00:25.250
Month doesn't really[br]make any sense here.

0:00:25.250,0:00:28.900
But since we're really displaying the[br]date, it makes sense for the database to

0:00:28.900,0:00:32.540
actually replicate what's on[br]the display as much as possible.

0:00:32.540,0:00:35.640
Units should be stored in[br]a separate table with preferences.

0:00:35.640,0:00:38.800
There's no reason to store things[br]we aren't displaying, such as,

0:00:38.800,0:00:41.790
you know, rainfall or[br]average temperature.

0:00:41.790,0:00:45.560
And besides, we cannot get these[br]from the OpenWeatherMap API.

0:00:45.560,0:00:48.820
We do need weather condition ID,[br]since we use this to

0:00:48.820,0:00:52.850
both display the forecast, and[br]determine the image to display.

0:00:52.850,0:00:56.100
And finally,[br]while it's not displayed in our UI,

0:00:56.100,0:00:59.140
we need an ID column to[br]uniquely identify each row.

0:01:00.260,0:01:02.440
As discussed, it's required for

0:01:02.440,0:01:06.410
all SQLI database tables that are going[br]to be displayed in Android list views.
