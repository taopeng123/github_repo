0:00:00.240,0:00:04.470
Let's talk about Loaders. Loaders are awesome. They were

0:00:04.470,0:00:07.080
introduced in Honeycomb, but are available as part of the

0:00:07.080,0:00:09.400
support library. So you can take advantage of them

0:00:09.400,0:00:13.170
when supporting earlier platform releases. Loaders are essentially the best

0:00:13.170,0:00:16.640
practice implementation for asynchronous data loading within an activity

0:00:16.640,0:00:20.040
or fragment. So when you create a Loader, it creates

0:00:20.040,0:00:23.100
an async task to load data on the background thread.

0:00:23.100,0:00:25.480
It then syncs with the UI thread when the initial

0:00:25.480,0:00:27.760
loading is complete, and can be set up to monitor

0:00:27.760,0:00:30.610
the underlying data, and deliver any updates to the UI

0:00:30.610,0:00:33.640
thread as well. Best still, all that work you did

0:00:33.640,0:00:36.500
adding a content provider to your database pays off right

0:00:36.500,0:00:39.050
now, with the cursor loader. The cursor loader is an

0:00:39.050,0:00:42.940
implementation of the async task loader, specifically designed to query

0:00:42.940,0:00:46.320
content providers, and return a cursor, which you can then

0:00:46.320,0:00:50.410
bind directly to a UI. It will automatically update that cursor,

0:00:50.410,0:00:53.700
whenever the underlying content provider changes, based on changes

0:00:53.700,0:00:56.240
to the underlying database. And it will reconnect to the

0:00:56.240,0:00:59.260
last returned cursor after being recreated, along with the

0:00:59.260,0:01:02.320
host activity, after a configuration change. That means you won't

0:01:02.320,0:01:04.610
have to requery data, just because the device was

0:01:04.610,0:01:07.600
rotated. So the cursor loader handles all of your cursor

0:01:07.600,0:01:11.890
management and background thread creation, UI thread synchronization, and data

0:01:11.890,0:01:15.380
source monitoring. If you chose not to use content providers,

0:01:15.380,0:01:19.340
you chose poorly. But still, you can take advantage

0:01:19.340,0:01:21.200
of loaders, you just need to create your own

0:01:21.200,0:01:24.200
loader by extending a think task loader directly. You

0:01:24.200,0:01:26.220
can find out more in the instructor notes below.
