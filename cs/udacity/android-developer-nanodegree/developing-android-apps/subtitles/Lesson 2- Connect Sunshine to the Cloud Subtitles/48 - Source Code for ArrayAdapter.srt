0:00:00.190,0:00:02.830
Do you remember this diagram from lesson one? The adapter

0:00:02.830,0:00:05.520
has a reference to the raw data. And has instructions on

0:00:05.520,0:00:09.020
how to build each list item layout. These layouts eventually make

0:00:09.020,0:00:11.840
it into the list view here. But what happens if any

0:00:11.840,0:00:15.490
of this data changes. Let's say for example, there's a fourth

0:00:15.490,0:00:19.120
contact named Don. The adapter knows how to create a list

0:00:19.120,0:00:22.090
item layout for Don. But now the list view is outdated

0:00:22.090,0:00:26.170
because it only has three items. Somehow, we need the adapter.

0:00:26.170,0:00:28.190
To notify the list view that things have

0:00:28.190,0:00:31.728
changed. And lucky for us, there's a method

0:00:31.728,0:00:37.590
called: adapter.notifyDatasetChanged( ). This notifies any attached observers,

0:00:37.590,0:00:40.460
like this one, that the underlying adapter data has

0:00:40.460,0:00:43.340
changed. Then the list view needs to populate

0:00:43.340,0:00:46.100
its children again. So it asks the adapter

0:00:46.100,0:00:47.990
how many items there are? And the adapter

0:00:47.990,0:00:51.210
responds with four. Then the ListView goes and fetches

0:00:51.210,0:00:53.940
each one individually until it fills up the screen.

0:00:54.940,0:00:57.300
And it's through that method that the ListView is able

0:00:57.300,0:01:00.250
to get all its list items. But now you

0:01:00.250,0:01:03.270
must be thinking. How did we actually update the ListView

0:01:03.270,0:01:06.230
successfully, without adding this line of code in our

0:01:06.230,0:01:09.290
app? Well, with a ray adapter, whenever you add or

0:01:09.290,0:01:14.190
remove elements from it, it internally calls notifyDataSetChanged. That means

0:01:14.190,0:01:16.260
we don't have to do anything. But how can be

0:01:16.260,0:01:20.050
confirm this? Well, we can check the actual implementation

0:01:20.050,0:01:23.470
of the ArrayAdapter class in the framework. And here's

0:01:23.470,0:01:26.190
the code for the ArrayAdapter class within the Android

0:01:26.190,0:01:29.930
framework. You can follow along with the link below.

0:01:29.930,0:01:32.910
First, we're going to search for the Add method. Remember,

0:01:32.910,0:01:35.730
we added forecast strings. To the adapter using this

0:01:35.730,0:01:38.790
method. And sure enough we see that, the notify

0:01:38.790,0:01:42.140
data set changed method is called internally. But you

0:01:42.140,0:01:44.740
might be thinking what about this Boolean here. Well

0:01:44.740,0:01:47.180
let's look it up. If you scroll to the top

0:01:47.180,0:01:50.270
you'll see that, notify on change is declared as

0:01:50.270,0:01:53.640
true initially. As you go through your other references you'll

0:01:53.640,0:01:56.800
see that it's only changed here. In this set

0:01:56.800,0:02:01.410
notify on change method. Since we don't call this public

0:02:01.410,0:02:04.600
method, with the value false, then we know that we're

0:02:04.600,0:02:07.440
going to be safely notified each time the adapter updates.

0:02:08.850,0:02:11.220
Now let's go back to the add method. I want to

0:02:11.220,0:02:14.280
show you one more thing. You'll notice in the add

0:02:14.280,0:02:17.660
all method, it only notifies its observers once. Whereas in

0:02:17.660,0:02:20.930
the add method every time you call this it will update

0:02:20.930,0:02:24.700
it's observers. That means that our code actually is refreshing

0:02:24.700,0:02:28.350
the list every time. So, if you're targeting honeycomb of above

0:02:28.350,0:02:30.180
you can use this method to be a little more

0:02:30.180,0:02:33.890
efficient. In general don't be afraid to try and do this

0:02:33.890,0:02:38.710
on your own. As a general pro tip, if you're ever unsure about something,

0:02:38.710,0:02:39.930
feel free to go and check the

0:02:39.930,0:02:42.760
Android source code. Don't treat the framework code

0:02:42.760,0:02:47.320
like a black box. Take advantage of the fact that Android is open source. The

0:02:47.320,0:02:48.910
more you learn about the platform the

0:02:48.910,0:02:50.690
better of an Android developer you can become.
