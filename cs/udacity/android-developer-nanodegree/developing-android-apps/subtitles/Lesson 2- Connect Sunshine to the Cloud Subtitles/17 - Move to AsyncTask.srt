0:00:00.420,0:00:03.460
For the solution within forecast fragment, we

0:00:03.460,0:00:08.310
implemented FetchWeather/task, which extends AsyncTask. The generics

0:00:08.310,0:00:13.518
we use are just Void, and this is fine for now. Then within the doInBackground

0:00:13.518,0:00:16.014
method, we copied our networking codes snippet,

0:00:16.014,0:00:18.610
here. It's the same, except [INAUDIBLE] in

0:00:18.610,0:00:21.600
certain cases we return null instead of

0:00:21.600,0:00:24.010
setting the forecast JSON string to be null.

0:00:25.010,0:00:28.770
Previously, the code was an on create view, which expected us

0:00:28.770,0:00:31.370
inflate and return a view. So it's important that it got

0:00:31.370,0:00:33.510
to the rest of the code. Even if there was an

0:00:33.510,0:00:37.110
error in the networking code. Now that the networking code is in

0:00:37.110,0:00:40.060
a sync task, there's really nothing that comes after this in

0:00:40.060,0:00:42.890
the given background method. So it's fine to just bail early

0:00:42.890,0:00:46.430
whenever there's an error. Also know that for our log messages,

0:00:46.430,0:00:50.230
we've defined a log tag constant. At the top of this task.

0:00:51.640,0:00:55.940
This log tag is defined to be the name of the FetchWeatherTask.class. The

0:00:55.940,0:00:57.670
reason we use this syntax instead

0:00:57.670,0:01:01.170
of declaring a string FetchWeatherTask, it because

0:01:01.170,0:01:04.370
we want these two to be in sync. If you ever rename the

0:01:04.370,0:01:07.630
class then it will throw an exception unless you also update it here.
