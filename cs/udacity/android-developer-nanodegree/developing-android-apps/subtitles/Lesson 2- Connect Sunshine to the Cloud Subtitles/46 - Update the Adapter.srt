0:00:00.150,0:00:02.400
From the logs, we know that we have the right forecast

0:00:02.400,0:00:04.770
data and it's in the right format that we want as

0:00:04.770,0:00:07.860
an array of strings. So it's finally time to update the

0:00:07.860,0:00:11.950
UI. Think back on how AsyncTasks are able to pass data

0:00:11.950,0:00:15.090
back onto the main thread. You can hit Ctrl+O to see

0:00:15.090,0:00:18.880
the list of available methods we can override in AsyncTask. If

0:00:18.880,0:00:21.190
you click on any of them, it will be prepopulated in

0:00:21.190,0:00:25.220
the code for you. Then, you can update ArrayAdapter with the new

0:00:25.220,0:00:28.730
data that was retrieved by the AsyncTask. As a hint, you

0:00:28.730,0:00:31.890
can make the ForecastAdapter be a global variable. That way, you

0:00:31.890,0:00:35.300
can access it from within the FetchWeatherTask. Make sure that this

0:00:35.300,0:00:37.810
is not a static class, otherwise, you won't be able to

0:00:37.810,0:00:41.810
access the member variable from the forecast fragment. Then, go ahead

0:00:41.810,0:00:44.250
and compile and build the app. When you run it, and

0:00:44.250,0:00:46.970
you hit the refresh button, you should see a week's worth

0:00:46.970,0:00:50.320
of weather data for your location. Once it's working, you can

0:00:50.320,0:00:52.310
remove the verbose log statements so you don't

0:00:52.310,0:00:54.900
clutter the logs. As you're working on this

0:00:54.900,0:00:58.550
code, if you see an unsupported operation exception,

0:00:58.550,0:01:00.360
make sure that when you're creating the fake

0:01:00.360,0:01:03.580
data, that when you initialize ArrayAdapter, you passed

0:01:03.580,0:01:05.590
in a list of strings, and not an

0:01:05.590,0:01:07.470
array. That way you can call the clear

0:01:07.470,0:01:10.040
method or the add method on this list collection.
