0:00:00.540,0:00:02.540
When you're logging a message in your app, you need

0:00:02.540,0:00:06.100
to determine what log level it should be displayed at.

0:00:06.100,0:00:08.710
Verbose logs should never be compiled into your app, except

0:00:08.710,0:00:12.600
during development. Debug logs are compiled in, but they're stripped

0:00:12.600,0:00:16.210
out at run time. Error, warn, and info logs are

0:00:16.210,0:00:19.650
all kept. And this is what the logging API looks

0:00:19.650,0:00:23.100
like. The first parameter is the log tag, which can

0:00:23.100,0:00:26.320
be any string that you want to identify the log message.

0:00:26.320,0:00:28.790
It's good practice to define the log tag as a

0:00:28.790,0:00:32.009
constant in your class. Usually it's the name of your class

0:00:32.009,0:00:35.060
or the app. The second parameter is the actual log

0:00:35.060,0:00:38.380
message. If we go back to monitor, we can see that

0:00:38.380,0:00:40.840
this is the log tag column and this is where

0:00:40.840,0:00:44.330
the log message is. If you click on this drop down

0:00:44.330,0:00:47.710
here you can filter the logs by log level. For example

0:00:47.710,0:00:50.600
you can click on Error to see all the error messages.

0:00:52.050,0:00:54.060
If you click on warn, you'll see all the warning

0:00:54.060,0:00:57.500
messages as well as anything more severe than that. The

0:00:57.500,0:01:00.550
same goes for the other levels. And verbose means that

0:01:00.550,0:01:03.130
you can see all the logs at all log levels.

0:01:05.250,0:01:08.650
As a PROTIP, you should avoid log spam for your sake and

0:01:08.650,0:01:13.400
the sake of other developers. The log buffer could fill up and important

0:01:13.400,0:01:16.500
error messages that you really need to see will either roll of the

0:01:16.500,0:01:20.780
logs or it will get lost in the sea of unimportant log messages.
