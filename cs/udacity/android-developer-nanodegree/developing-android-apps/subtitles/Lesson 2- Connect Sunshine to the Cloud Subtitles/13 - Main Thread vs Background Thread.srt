0:00:00.440,0:00:03.790
If you answered Async Task, then you are correct.

0:00:03.790,0:00:06.930
To understand why we chose Async Task as the answer,

0:00:06.930,0:00:09.900
we can check the developer documentation. In this API

0:00:09.900,0:00:13.670
guide on processes and threads, we can scroll to the

0:00:13.670,0:00:16.730
Worker threads section. Right away, if you want to follow

0:00:16.730,0:00:20.810
along, the link is included below. Say, for example, that

0:00:20.810,0:00:23.170
you want to download an image from the network

0:00:23.170,0:00:26.040
at this URL and then you want to update the

0:00:26.040,0:00:30.020
UI so that it displays this bitmap. Well, creating

0:00:30.020,0:00:32.250
your own thread to download the image is a

0:00:32.250,0:00:35.170
valid option, but there's a lot of overhead to

0:00:35.170,0:00:38.790
handle in making you app actually thread safe. After

0:00:38.790,0:00:41.750
you download your image, you cannot directly update the

0:00:41.750,0:00:45.070
UI from a background thread. However, Android has several

0:00:45.070,0:00:47.500
options to run code that manipulates the UI to

0:00:47.500,0:00:51.280
run from other threads. In this example, yet another

0:00:51.280,0:00:54.220
runnable is created to get the bitmap result back onto

0:00:54.220,0:00:57.810
the main thread to update the image view. This solution

0:00:57.810,0:01:00.220
is a little cumbersome because you have to manage two

0:01:00.220,0:01:04.099
runnables here. To abstract away this complexity we can use

0:01:04.099,0:01:06.960
an async task and then to kick off the async

0:01:06.960,0:01:10.400
task. For example, when someone clicks a button, then you

0:01:10.400,0:01:13.030
just initialize the task, and then you can call execute

0:01:13.030,0:01:16.730
on it, and then pass in any parameters that are needed.

0:01:16.730,0:01:19.470
Notice that when you're extending the Async class, there's a

0:01:19.470,0:01:22.750
couple of generics that you need to specify. The first is

0:01:22.750,0:01:24.670
the type that will be passed into the do in

0:01:24.670,0:01:28.520
background method. So, if you want to pass in this image URL

0:01:28.520,0:01:31.310
that is specified string here and then in doing background

0:01:31.310,0:01:34.690
you'll get a string parameter. The second one is for the

0:01:34.690,0:01:37.380
type of object that you'll get when you get progress

0:01:37.380,0:01:41.670
updates as a task gets executed. We're not using that here,

0:01:41.670,0:01:48.000
so it's okay to specify that as void. And the third type is type of results

0:01:48.000,0:01:52.127
that we'll be sending back to the main thread through the onPostExecute method
