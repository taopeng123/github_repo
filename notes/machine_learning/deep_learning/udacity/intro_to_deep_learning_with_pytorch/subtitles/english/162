1
00:00:00,000 --> 00:00:02,715
Hi there. So, I'm going to be walking you through

2
00:00:02,715 --> 00:00:06,795
this tutorial for some new features in PyTorch 1.0.

3
00:00:06,795 --> 00:00:10,470
PyTorch 1.0 has been specifically built for making

4
00:00:10,470 --> 00:00:14,250
this transition between developing your model in Python,

5
00:00:14,250 --> 00:00:20,280
and then converting it into a module that you can load into a C++ environment.

6
00:00:20,280 --> 00:00:21,915
The reason I want to do this is because

7
00:00:21,915 --> 00:00:26,895
many production environments are actually written in C++.

8
00:00:26,895 --> 00:00:30,195
So, if you want to take your model,

9
00:00:30,195 --> 00:00:34,160
you've trained, and you've spent all this time developing and training,

10
00:00:34,160 --> 00:00:36,620
and you actually want to use it in production for

11
00:00:36,620 --> 00:00:39,620
making an app on your phone, or a web app,

12
00:00:39,620 --> 00:00:44,270
or embedding on a self-driving car,

13
00:00:44,270 --> 00:00:46,910
then you actually need to convert

14
00:00:46,910 --> 00:00:52,420
your PyTorch model from Python into something that can be used in C++.

15
00:00:52,420 --> 00:00:54,390
So, with PyTorch 1.0,

16
00:00:54,390 --> 00:00:59,120
the team has added a couple of great features for converting

17
00:00:59,120 --> 00:01:05,510
your model into a serialized format that you can load into a C++ program.

18
00:01:05,510 --> 00:01:11,795
So, there are the two ways in general of converting your PyTorch model into a C++ script.

19
00:01:11,795 --> 00:01:16,675
The first way of converting a PyTorch model is known as tracing.

20
00:01:16,675 --> 00:01:20,420
The idea behind this is that you can actually map out

21
00:01:20,420 --> 00:01:24,620
the structure of your model by passing an example tensor through it.

22
00:01:24,620 --> 00:01:28,505
So, you're basically doing a forward pass through your model,

23
00:01:28,505 --> 00:01:30,290
and then behind the scene,

24
00:01:30,290 --> 00:01:35,500
PyTorch is keeping track of all the operations that are being performed on your inputs.

25
00:01:35,500 --> 00:01:39,170
In this way, it can actually build out a static graph that can then

26
00:01:39,170 --> 00:01:43,175
be exported and loaded into C++.

27
00:01:43,175 --> 00:01:47,120
So, to do this, we use a new module in PyTorch called JIT.

28
00:01:47,120 --> 00:01:50,610
So, JIT stands for Just-In-Time compiler.

29
00:01:50,610 --> 00:01:52,120
So, the way this works,

30
00:01:52,120 --> 00:01:54,080
is that first you create your model.

31
00:01:54,080 --> 00:01:59,495
So, in this case, we're just using a resnet18 model that we get from torch vision.

32
00:01:59,495 --> 00:02:02,950
Really, this could be any model that you've defined and you've trained.

33
00:02:02,950 --> 00:02:06,110
Then, we need an example of an input.

34
00:02:06,110 --> 00:02:09,380
So, this can be just random values,

35
00:02:09,380 --> 00:02:11,720
a random tensor, but it should have

36
00:02:11,720 --> 00:02:14,810
the same shape of what you would normally provide to your model.

37
00:02:14,810 --> 00:02:16,035
So, in this case,

38
00:02:16,035 --> 00:02:19,790
resnet18 is an image classifier convolutional network.

39
00:02:19,790 --> 00:02:26,390
So, we would typically pass in images with some batch size and three color channels.

40
00:02:26,390 --> 00:02:29,875
These images are typically 224 by 224.

41
00:02:29,875 --> 00:02:33,800
So, this case, we're just passing in a single fake image.

42
00:02:33,800 --> 00:02:36,020
Notice that it is just a random tensor.

43
00:02:36,020 --> 00:02:37,480
So, this is not an actual image,

44
00:02:37,480 --> 00:02:40,430
it just needs to be an example input that is

45
00:02:40,430 --> 00:02:44,150
the same shape and size as your normal inputs.

46
00:02:44,150 --> 00:02:47,525
Then what we can do is pass in our model,

47
00:02:47,525 --> 00:02:50,465
and the example to torch.jit.trace,

48
00:02:50,465 --> 00:02:53,725
and this will give us back a trace to Script module.

49
00:02:53,725 --> 00:02:58,770
At this point, you can use your trace Script module just like a normal module.

50
00:02:58,770 --> 00:03:01,790
So, you can pass in data and then it'll just do

51
00:03:01,790 --> 00:03:05,135
a forward pass through it and it'll return the output,

52
00:03:05,135 --> 00:03:07,870
and you can look at that and use it like normal.

