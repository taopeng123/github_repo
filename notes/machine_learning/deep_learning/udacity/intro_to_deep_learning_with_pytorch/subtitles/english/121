1
00:00:00,000 --> 00:00:02,820
To perform image augmentation in PyTorch,

2
00:00:02,820 --> 00:00:06,425
you can use the help of a built-in image transformation library.

3
00:00:06,425 --> 00:00:07,845
Here you can scroll through

4
00:00:07,845 --> 00:00:11,105
all the common transforms available in the transforms library.

5
00:00:11,105 --> 00:00:13,740
You can see transforms that shift around the image from

6
00:00:13,740 --> 00:00:16,865
left to right or that crop the image randomly.

7
00:00:16,865 --> 00:00:21,555
In our case, we want our dataset to be a little more rotation and scale invariant

8
00:00:21,555 --> 00:00:23,700
and so we can choose random transforms that

9
00:00:23,700 --> 00:00:26,535
change the scale and how much an image is rotated.

10
00:00:26,535 --> 00:00:29,220
I'm going to briefly show you how to do this in code and

11
00:00:29,220 --> 00:00:31,890
then you can choose whether or not to use it in your own work.

12
00:00:31,890 --> 00:00:35,760
I'm going to augment our data in the same step that I'm loading it in.

13
00:00:35,760 --> 00:00:38,640
Basically, I want to add to our composite transform.

14
00:00:38,640 --> 00:00:41,310
Where you've previously just seen conversion to tensors and

15
00:00:41,310 --> 00:00:44,740
normalization you can put other types of transforms as well.

16
00:00:44,740 --> 00:00:47,660
This transformation randomly flips an image along

17
00:00:47,660 --> 00:00:52,470
its horizontal axis and this code randomly rotates an image by 10 degrees.

18
00:00:52,470 --> 00:00:56,890
I apply this transform as usual when I form my training and test data.

19
00:00:56,890 --> 00:01:01,340
And that's all you need to do to give your images some geometric variation.

20
00:01:01,340 --> 00:01:02,930
After transforming my data,

21
00:01:02,930 --> 00:01:05,690
I've gone through the same visualization steps

22
00:01:05,690 --> 00:01:08,060
and we can see by looking at the borders of

23
00:01:08,060 --> 00:01:10,430
some of these images that some of our images have been

24
00:01:10,430 --> 00:01:13,675
rotated slightly right or left within 10 degrees.

25
00:01:13,675 --> 00:01:17,300
Then to see if data augmentation actually improve the performance of

26
00:01:17,300 --> 00:01:21,810
our model I use the same convolutional neural network and loop that I did before.

27
00:01:21,810 --> 00:01:26,060
I trained the model over 30 epics using our augmented training data.

28
00:01:26,060 --> 00:01:29,510
In this case it seemed that the training and validation mass took a little

29
00:01:29,510 --> 00:01:32,995
longer to decrease but may have reached a smaller minimum.

30
00:01:32,995 --> 00:01:36,290
I saved this augmented model and when I tested it,

31
00:01:36,290 --> 00:01:39,020
I got one percent more accuracy in general.

32
00:01:39,020 --> 00:01:43,730
This is a minor increase in test accuracy but the small performance improvements can

33
00:01:43,730 --> 00:01:45,830
add up and there's something worthwhile if you're

34
00:01:45,830 --> 00:01:48,530
really trying to find the best model for a task.

35
00:01:48,530 --> 00:01:50,300
Generally in this course,

36
00:01:50,300 --> 00:01:52,955
your job will be to design a model so that it can reach

37
00:01:52,955 --> 00:01:55,730
a high accuracy but in addition to that,

38
00:01:55,730 --> 00:01:58,565
choices about data augmentation and loss and

39
00:01:58,565 --> 00:02:01,580
optimization functions can take that even further.

40
00:02:01,580 --> 00:02:03,800
So this is a useful skill to have.

