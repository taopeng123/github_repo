1
00:00:00,000 --> 00:00:02,800
So, here is a complete Gram matrix function.

2
00:00:02,800 --> 00:00:06,670
This takes inner tensor which will be the output of some convolutional layer.

3
00:00:06,670 --> 00:00:09,505
Then the first thing I do is take a look at its size.

4
00:00:09,505 --> 00:00:12,715
Each tensor is going to be four-dimensional with a batch size,

5
00:00:12,715 --> 00:00:14,850
a depth, a height, and a width.

6
00:00:14,850 --> 00:00:17,460
I can ignore the batch size at this point because I'm really

7
00:00:17,460 --> 00:00:20,150
interested in the depth or number of feature maps,

8
00:00:20,150 --> 00:00:21,405
and the height and width.

9
00:00:21,405 --> 00:00:25,575
These dimensions then tell me all I need to know to then factorize this tensor.

10
00:00:25,575 --> 00:00:28,215
Next, I'm reshaping this tensor so that it's now

11
00:00:28,215 --> 00:00:31,370
a 2-D shape that has its spatial dimensions flattened.

12
00:00:31,370 --> 00:00:34,210
It retains the number of feature maps as the number of rows.

13
00:00:34,210 --> 00:00:37,290
So, it's D rows by H times W columns.

14
00:00:37,290 --> 00:00:39,770
Finally, I calculate the Gram matrix by

15
00:00:39,770 --> 00:00:42,875
matrix multiplying this tensor times its transpose.

16
00:00:42,875 --> 00:00:46,940
This effectively multiplies all the features and gets the correlations.

17
00:00:46,940 --> 00:00:50,070
Finally, I make sure to return that calculated matrix.

18
00:00:50,070 --> 00:00:52,465
Then, I can put all these pieces together,

19
00:00:52,465 --> 00:00:56,315
I have my Get features function and my Gram matrix function.

20
00:00:56,315 --> 00:00:59,390
Before I even start to form my target image,

21
00:00:59,390 --> 00:01:02,795
I know I want to get the features from my content and style image.

22
00:01:02,795 --> 00:01:05,645
Those are going to remain the same throughout this process.

23
00:01:05,645 --> 00:01:07,850
So, right here I'm calling Get features on

24
00:01:07,850 --> 00:01:11,690
our content image passing in our content image and the VGG model,

25
00:01:11,690 --> 00:01:14,030
and I do the same thing for our style features,

26
00:01:14,030 --> 00:01:16,845
passing on our style image and the VGG model.

27
00:01:16,845 --> 00:01:20,180
Here, I'm calculating all the gram matrices for each of

28
00:01:20,180 --> 00:01:23,455
my style layers comv 11 up to comv 51.

29
00:01:23,455 --> 00:01:28,020
This looks at all of the layers in our style features and computes the gram matrix.

30
00:01:28,020 --> 00:01:30,935
Then it returns a dictionary where I can call style grams

31
00:01:30,935 --> 00:01:34,130
with a given layer name and get the gram matrix for that layer.

32
00:01:34,130 --> 00:01:36,455
Then I'm going to create a target image.

33
00:01:36,455 --> 00:01:38,050
I could start with a blank slate,

34
00:01:38,050 --> 00:01:42,345
but it turns out to be easier to just start with a clone of the content image.

35
00:01:42,345 --> 00:01:46,490
This way, my image will not divert too far from my octopus content and

36
00:01:46,490 --> 00:01:50,900
my plan will be to iterate and change this image to stylize it more and more later.

37
00:01:50,900 --> 00:01:53,780
So, in preparation for changing this target image,

38
00:01:53,780 --> 00:01:55,885
I'm going to set requires-grad to true,

39
00:01:55,885 --> 00:01:58,635
and I'll move it to GPU if available.

40
00:01:58,635 --> 00:02:01,070
All right, the next part is the most involved part,

41
00:02:01,070 --> 00:02:04,100
and next we'll talk about how to set and calculate our style and

42
00:02:04,100 --> 00:02:07,670
content losses for creating interesting target images.

