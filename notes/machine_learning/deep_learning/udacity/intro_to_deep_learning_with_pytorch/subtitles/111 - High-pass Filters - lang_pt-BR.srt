1
00:00:00,070 --> 00:00:03,706
FILTROS PASSA-ALTA

2
00:00:04,834 --> 00:00:08,049
Em processamento de imagens,
os filtros são usados para descartar

3
00:00:08,082 --> 00:00:11,368
as informações indesejadas
ou irrelevantes de uma imagem

4
00:00:11,401 --> 00:00:14,203
ou para ampliar características
como os limites do objeto

5
00:00:14,236 --> 00:00:16,206
ou outros traços distintos.

6
00:00:16,734 --> 00:00:19,879
O filtro passa-alta é usado
para tornar a imagem mais nítida

7
00:00:19,912 --> 00:00:22,573
e acentuar as partes
de alta frequência da imagem,

8
00:00:22,606 --> 00:00:26,224
que são áreas onde os níveis
de intensidade de pixels vizinhos

9
00:00:26,257 --> 00:00:30,483
mudam bruscamente,
como da cor escura à cor clara.

10
00:00:30,516 --> 00:00:33,342
E, como estamos analisando
padrões de intensidade,

11
00:00:33,375 --> 00:00:34,802
os filtros que vamos usar

12
00:00:34,835 --> 00:00:37,065
serão aplicados
a imagens em escala de cinza,

13
00:00:37,098 --> 00:00:38,827
que representam
essas informações

14
00:00:38,860 --> 00:00:42,715
e exibem padrões de brilho e sombra
num formato simples.

15
00:00:43,186 --> 00:00:46,692
Vamos analisar a imagem
deste panda como exemplo.

16
00:00:46,725 --> 00:00:50,700
O que acontecerá
se aplicarmos um filtro passa-alta?

17
00:00:50,733 --> 00:00:53,966
Onde há pouca
ou nenhuma mudança de intensidade

18
00:00:53,999 --> 00:00:55,300
na imagem original,

19
00:00:55,333 --> 00:00:57,975
como nestas grandes áreas
de sombra e luz,

20
00:00:58,008 --> 00:01:00,503
o filtro passa-alta vai escurecer
estas áreas

21
00:01:00,536 --> 00:01:02,754
e preencher os pixels
de preto.

22
00:01:02,787 --> 00:01:06,459
Mas, nas áreas em que os pixels são
bem mais claros do que os vizinhos,

23
00:01:06,492 --> 00:01:10,683
o filtro passa-alta vai acentuar
essa diferença e criar uma linha.

24
00:01:10,716 --> 00:01:14,424
Podemos ver que isso produz o efeito
de realçar as bordas.

25
00:01:14,457 --> 00:01:18,661
As bordas são as áreas da imagem
onde a intensidade muda rapidamente,

26
00:01:18,694 --> 00:01:22,154
e elas quase sempre indicam
os limites do objeto.

27
00:01:22,629 --> 00:01:26,243
Agora vamos ver exatamente
como um filtro como esse funciona.

28
00:01:26,917 --> 00:01:30,014
Os filtros dos quais falarei
aparecerão na forma de matrizes,

29
00:01:30,047 --> 00:01:32,371
em geral chamadas
de "Kernels de convolução",

30
00:01:32,404 --> 00:01:36,070
que são grades de números
que modificam uma imagem.

31
00:01:36,103 --> 00:01:38,207
Este é um exemplo
de um filtro passa-alta

32
00:01:38,240 --> 00:01:39,920
de detecção de bordas.

33
00:01:39,953 --> 00:01:44,275
É um Kernel 3x3
cujos elementos somam 0.

34
00:01:44,308 --> 00:01:48,468
É importante, na detecção de bordas,
que todos os elementos somem 0,

35
00:01:48,501 --> 00:01:53,891
porque o filtro computa a diferença,
ou mudança, entre pixels vizinhos.

36
00:01:53,924 --> 00:01:58,041
Essa diferença é calculada
subtraindo os valores de pixel.

37
00:01:58,074 --> 00:02:00,367
Neste caso, subtraindo
os valores de pixel

38
00:02:00,400 --> 00:02:02,975
ao redor do pixel do meio.

39
00:02:03,008 --> 00:02:05,906
E, se os valores deste Kernel
não somarem 0,

40
00:02:05,939 --> 00:02:07,899
isso significa
que a diferença calculada

41
00:02:07,932 --> 00:02:10,737
será ponderada
positiva ou negativamente,

42
00:02:10,770 --> 00:02:13,586
o que terá o efeito
de clarear ou escurecer

43
00:02:13,619 --> 00:02:16,629
toda a imagem filtrada,
respectivamente.

44
00:02:16,662 --> 00:02:17,920
Para aplicar este filtro,

45
00:02:17,953 --> 00:02:21,895
uma imagem de input F(x,y)
é convolvida com este Kernel,

46
00:02:21,928 --> 00:02:23,882
que chamarei de "K".

47
00:02:23,915 --> 00:02:26,435
Isso é chamado
de "convolução de Kernel",

48
00:02:26,468 --> 00:02:29,260
e essa convolução
é representada por "*",

49
00:02:29,293 --> 00:02:32,104
que não deve ser confundido
com o sinal de multiplicação.

50
00:02:32,137 --> 00:02:34,497
A convolução de Kernel é
uma operação importante

51
00:02:34,530 --> 00:02:36,580
em aplicativos
de visão computacional,

52
00:02:36,613 --> 00:02:40,113
e é a base
das redes neurais convolucionais.

53
00:02:40,146 --> 00:02:43,607
Ela consiste em pegar um Kernel,
que é a pequena grade de números,

54
00:02:43,640 --> 00:02:46,478
e passá-lo sobre uma imagem,
pixel por pixel,

55
00:02:46,511 --> 00:02:49,371
transformando-a
com base no que esses números são.

56
00:02:49,404 --> 00:02:51,504
E veremos que,
ao mudar esses números,

57
00:02:51,537 --> 00:02:53,509
podemos criar
muitos efeitos diferentes,

58
00:02:53,542 --> 00:02:56,930
desde a detecção de bordas
ao desfoque da imagem.

59
00:02:56,963 --> 00:02:58,140
Mostrarei um exemplo

60
00:02:58,173 --> 00:03:01,530
usando este filtro 3x3
de detecção de bordas.

61
00:03:01,563 --> 00:03:03,424
Para ver melhor
as operações de pixel,

62
00:03:03,457 --> 00:03:05,585
darei um zoom
na orelha do panda

63
00:03:05,618 --> 00:03:08,012
para ver os valores de pixel
em escala de cinza.

64
00:03:08,622 --> 00:03:11,642
Primeiro, sobre cada pixel
desta imagem em escala de cinza,

65
00:03:11,675 --> 00:03:13,244
colocamos o Kernel

66
00:03:13,277 --> 00:03:16,559
de modo que o pixel fique
no centro do Kernel.

67
00:03:16,592 --> 00:03:19,687
Escolhi este pixel
apenas como exemplo.

68
00:03:19,720 --> 00:03:21,888
Depois olhamos
para a grade de pixels 3x3,

69
00:03:21,921 --> 00:03:24,620
centralizada
com este único pixel.

70
00:03:24,653 --> 00:03:26,699
Em seguida, pegamos
os números do Kernel

71
00:03:26,732 --> 00:03:30,075
e os multiplicamos
pelos pixels correspondentes.

72
00:03:31,048 --> 00:03:34,221
Então este pixel
do canto superior esquerdo, 120,

73
00:03:34,254 --> 00:03:37,782
é multiplicado pelo número
do canto do Kernel, 0.

74
00:03:37,815 --> 00:03:42,158
Em seguida, multiplicamos
o valor 140 por -1.

75
00:03:42,191 --> 00:03:45,494
Depois multiplicamos
120 por 0.

76
00:03:45,527 --> 00:03:49,612
Fazemos isso com todos os 9 pares
de valores pixel-Kernel.

77
00:03:49,645 --> 00:03:52,738
Observe que o pixel do meio,
cujo valor é 220,

78
00:03:52,771 --> 00:03:56,714
será multiplicado por 4,
que é o valor do meio do Kernel.

79
00:03:56,747 --> 00:03:59,108
Finalmente, todos estes valores
são somados

80
00:03:59,141 --> 00:04:02,368
para obter
um novo valor de pixel, 60.

81
00:04:02,401 --> 00:04:05,525
Este valor significa que uma borda
bem estreita foi detectada,

82
00:04:05,558 --> 00:04:09,058
o que podemos ver olhando
para esta área 3x3 da imagem.

83
00:04:09,091 --> 00:04:13,009
Ela é clara na parte inferior e fica
um pouco mais escura no topo,

84
00:04:13,042 --> 00:04:15,765
mas a mudança é bem gradual.

85
00:04:15,798 --> 00:04:18,983
Os multiplicadores do Kernel
são comumente chamados de "pesos",

86
00:04:19,016 --> 00:04:22,735
porque determinam em que medida
o pixel é importante, ou pesado,

87
00:04:22,768 --> 00:04:25,571
para a formação
de uma nova imagem de output.

88
00:04:25,604 --> 00:04:27,529
Neste caso,
para a detecção de bordas,

89
00:04:27,562 --> 00:04:29,801
o pixel do meio é
o mais importante,

90
00:04:29,834 --> 00:04:32,899
seguido dos pixels mais próximos,
na parte superior e inferior

91
00:04:32,932 --> 00:04:34,486
e à esquerda e direita,

92
00:04:34,519 --> 00:04:38,566
que são pesos negativos
que aumentam o contraste da imagem.

93
00:04:38,599 --> 00:04:41,539
Os pixels do canto são
os mais distantes do pixel do meio

94
00:04:41,572 --> 00:04:44,835
e, neste exemplo,
nós não damos a eles nenhum peso.

95
00:04:44,868 --> 00:04:48,576
Então esta soma ponderada se torna
o valor do pixel correspondente

96
00:04:48,609 --> 00:04:53,132
à mesma posição XY
na imagem de output.

97
00:04:53,165 --> 00:04:56,716
Fazemos isso com todas as posições
de pixel da imagem original,

98
00:04:56,749 --> 00:04:59,158
até obtermos
uma imagem de output completa

99
00:04:59,191 --> 00:05:01,745
que tenha o mesmo tamanho
da imagem de input,

100
00:05:01,778 --> 00:05:04,230
com novos valores de pixel
filtrados.

101
00:05:04,973 --> 00:05:08,437
A única coisa que você deve avaliar,
além da soma ponderada,

102
00:05:08,470 --> 00:05:11,466
é o que fazer nas bordas
e nos cantos da imagem,

103
00:05:11,499 --> 00:05:16,158
pois nem sempre é possível sobrepor
o Kernel aos valores de pixel 3x3.

104
00:05:16,867 --> 00:05:20,698
Em seguida, vamos praticar mais
com filtros passa-alta

105
00:05:20,731 --> 00:05:22,736
e depois escrever
nosso próprio código.

