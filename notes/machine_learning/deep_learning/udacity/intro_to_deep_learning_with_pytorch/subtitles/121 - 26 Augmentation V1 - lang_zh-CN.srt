1
00:00:00,000 --> 00:00:02,820
要在 PyTorch 中增强图像

2
00:00:02,820 --> 00:00:06,425
你可以利用内置的图像转换库

3
00:00:06,425 --> 00:00:07,845
你可以在此页面

4
00:00:07,845 --> 00:00:11,105
滚动浏览 transforms 库中的所有常见转换

5
00:00:11,105 --> 00:00:13,740
可以看到将图像从左移到右的转换

6
00:00:13,740 --> 00:00:16,865
或者随机裁剪图像的转换

7
00:00:16,865 --> 00:00:21,555
我们希望数据集具有旋转不变性和尺度不变性

8
00:00:21,555 --> 00:00:23,700
因此我们可以选择更改尺度

9
00:00:23,700 --> 00:00:26,535
和图像旋转幅度的随机转换

10
00:00:26,535 --> 00:00:29,220
我将简单介绍下如何在代码中实现这些转换

11
00:00:29,220 --> 00:00:31,890
你可以选择是否在你的项目中采用此功能

12
00:00:31,890 --> 00:00:35,760
我将在加载数据的步骤中增强数据

13
00:00:35,760 --> 00:00:38,640
我想添加到 compose 转换中

14
00:00:38,640 --> 00:00:41,310
之前只是转换为张量和标准化图像

15
00:00:41,310 --> 00:00:44,740
你还可以在此添加其他转换

16
00:00:44,740 --> 00:00:47,660
这个转换沿着水平轴随机翻转图像

17
00:00:47,660 --> 00:00:52,470
这行代码随机地旋转图像 10 度

18
00:00:52,470 --> 00:00:56,890
我在创建训练和测试数据时照常应用这些转换

19
00:00:56,890 --> 00:01:01,340
只需这么操作就能使图像具有几何变化

20
00:01:01,340 --> 00:01:02,930
转换数据后

21
00:01:02,930 --> 00:01:05,690
我执行了相同的可视化步骤

22
00:01:05,690 --> 00:01:08,060
通过查看这些图像的边界

23
00:01:08,060 --> 00:01:10,430
可以发现某些图像

24
00:01:10,430 --> 00:01:13,675
稍微向右或向左旋转了 10 度

25
00:01:13,675 --> 00:01:17,300
为了查看数据增强是否真的改善了模型效果

26
00:01:17,300 --> 00:01:21,810
我使用了之前的相同卷积神经网络和循环

27
00:01:21,810 --> 00:01:26,060
我使用增强的训练数据训练模型 30 个周期

28
00:01:26,060 --> 00:01:29,510
似乎训练和验证损失的降低持续时间更长

29
00:01:29,510 --> 00:01:32,995
但是最低值更小

30
00:01:32,995 --> 00:01:36,290
我保存了这个增强后的模型

31
00:01:36,290 --> 00:01:39,020
测试后发现准确率基本提高了一个百分点

32
00:01:39,020 --> 00:01:43,730
测试准确率虽然增幅很小 但是可以积少成多

33
00:01:43,730 --> 00:01:45,830
如果你想寻找某个任务的最佳模型

34
00:01:45,830 --> 00:01:48,530
这种增强是值得一试的

35
00:01:48,530 --> 00:01:50,300
在这门课程中

36
00:01:50,300 --> 00:01:52,955
我们的目的是设计一个模型

37
00:01:52,955 --> 00:01:55,730
使其能达到很高的准确率 但除此之外

38
00:01:55,730 --> 00:01:58,565
选择特定的数据增强方式和损失及优化函数

39
00:01:58,565 --> 00:02:01,580
能够进一步改善模型

40
00:02:01,580 --> 00:02:03,800
这是很实用的技能

