1
00:00:00,233 --> 00:00:01,901
Qualquer imagem
em escala de cinza

2
00:00:01,935 --> 00:00:04,236
é interpretada pelo computador
como um array,

3
00:00:04,269 --> 00:00:05,403
uma grade de valores

4
00:00:05,436 --> 00:00:07,506
em que cada célula
é chamada de "pixel".

5
00:00:07,540 --> 00:00:09,775
E cada pixel tem
um valor numérico.

6
00:00:09,809 --> 00:00:14,180
Cada imagem na base de dados MNIST
tem 28 pixels de altura e largura,

7
00:00:14,214 --> 00:00:17,984
então é entendido por um computador
como um array de 28 por 28.

8
00:00:18,018 --> 00:00:20,119
Numa imagem em escala
de cinza,

9
00:00:20,153 --> 00:00:23,155
pixels brancos são codificados
como o valor 255,

10
00:00:23,189 --> 00:00:25,558
e pixels pretos são codificados
como 0.

11
00:00:25,592 --> 00:00:27,693
Pixels cinza ficam
entre os dois.

12
00:00:27,727 --> 00:00:30,062
O cinza claro fica
mais perto de 255.

13
00:00:30,096 --> 00:00:31,831
Veremos que imagens coloridas

14
00:00:31,865 --> 00:00:33,966
têm representações
numéricas similares

15
00:00:34,000 --> 00:00:35,368
para cada cor de pixel.

16
00:00:35,402 --> 00:00:39,672
Estas imagens da MNIST passaram
por um pequeno pré-processamento.

17
00:00:39,706 --> 00:00:42,675
Elas foram reescalonadas
para terem valores de pixel

18
00:00:42,709 --> 00:00:46,746
que variam de 0 a 1,
em vez de 0 a 255.

19
00:00:46,780 --> 00:00:50,549
Para ir de um alcance de 0 a 255
para um alcance de 0 a 1,

20
00:00:50,583 --> 00:00:53,919
você tem que dividir
cada valor de pixel por 255.

21
00:00:53,953 --> 00:00:56,288
Isto é chamado
de "normalização".

22
00:00:56,322 --> 00:00:59,425
É comum em várias técnicas
de aprendizado profundo.

23
00:00:59,459 --> 00:01:02,294
A normalização vai ajudar
o algoritmo a treinar melhor.

24
00:01:02,328 --> 00:01:05,398
Nós queremos valores
de pixel normalizados

25
00:01:05,432 --> 00:01:08,701
porque redes neurais confiam
em cálculos de gradientes.

26
00:01:08,735 --> 00:01:11,904
Elas estão tentando aprender
qual a importância e o peso

27
00:01:11,938 --> 00:01:15,174
que um pixel deve ter ao determinar
a classe de uma imagem.

28
00:01:15,208 --> 00:01:16,909
E normalizar
os valores de pixel

29
00:01:16,943 --> 00:01:19,545
ajuda os cálculos de gradiente
a serem consistentes

30
00:01:19,579 --> 00:01:21,814
e não ficarem tão grandes
que atrasem

31
00:01:21,848 --> 00:01:23,783
ou impeçam
que uma rede treine.

32
00:01:23,817 --> 00:01:26,252
Agora que temos
dados normalizados,

33
00:01:26,286 --> 00:01:29,221
como vamos abordar a tarefa
de classificar estas imagens?

34
00:01:29,255 --> 00:01:32,291
Você já aprendeu um método
para classificação:

35
00:01:32,325 --> 00:01:34,560
usar um perceptron
multicamadas.

36
00:01:34,594 --> 00:01:38,531
Como vou colocar
estes dados de imagem em uma MLP?

37
00:01:38,565 --> 00:01:41,734
Lembre-se de que MLPs só pegam
vetores como input.

38
00:01:41,768 --> 00:01:44,270
Para usar uma MLP com imagens,

39
00:01:44,304 --> 00:01:47,940
precisamos converter qualquer
array de imagem em um vetor.

40
00:01:47,974 --> 00:01:50,343
Este processo é tão comum
que tem um nome:

41
00:01:50,377 --> 00:01:51,577
achatamento.

42
00:01:51,611 --> 00:01:55,348
Eu vou esclarecer este processo
com um pequeno exemplo.

43
00:01:55,382 --> 00:01:57,616
No caso de uma imagem
de 4 por 4,

44
00:01:57,650 --> 00:02:00,386
temos uma matriz
com 16 valores de pixel.

45
00:02:00,420 --> 00:02:03,422
Em vez de representá-lo
como uma matriz de 4 por 4,

46
00:02:03,456 --> 00:02:05,858
podemos construir um vetor
com 16 entradas.

47
00:02:05,892 --> 00:02:08,294
Com as quatro primeiras entradas
do vetor

48
00:02:08,328 --> 00:02:10,928
correspondendo à 1ª fila
do nosso antigo array.

49
00:02:10,962 --> 00:02:13,730
As próximas quatro entradas
correspondem à 2ª fila.

50
00:02:13,763 --> 00:02:14,899
E por aí vai.

51
00:02:14,932 --> 00:02:17,269
Depois de converter as imagens
em vetores,

52
00:02:17,303 --> 00:02:20,473
elas podem ser alimentadas
para a camada de input de uma MLP.

53
00:02:20,507 --> 00:02:22,108
Veremos como isto funciona

54
00:02:22,142 --> 00:02:24,008
e como prever a classe

55
00:02:24,042 --> 00:02:26,696
de qualquer imagem
nos próximos vídeos.

