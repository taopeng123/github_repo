1
00:00:00,000 --> 00:00:01,665
Hello, and welcome back.

2
00:00:01,665 --> 00:00:07,305
So, here are my solutions for the exercises I had you do on loading image data.

3
00:00:07,305 --> 00:00:11,910
Here, I had you define some transforms and then load the actual dataset with

4
00:00:11,910 --> 00:00:14,505
image folder and then turn that into a data loader

5
00:00:14,505 --> 00:00:17,790
using this torch utils data loader class.

6
00:00:17,790 --> 00:00:21,510
So, here, I chose a couple transforms.

7
00:00:21,510 --> 00:00:27,855
So, first, I'm resizing the images to be 255 by 255 squares.

8
00:00:27,855 --> 00:00:32,430
So, basically, even if your image is actually a rectangle,

9
00:00:32,430 --> 00:00:36,630
then this will resize it to be square with 255 pixels on each size.

10
00:00:36,630 --> 00:00:39,135
The first transform I used was resize.

11
00:00:39,135 --> 00:00:44,240
So, this resizes your images to be squares with 255 pixels on each side.

12
00:00:44,240 --> 00:00:47,120
So, even if your original image is a rectangle,

13
00:00:47,120 --> 00:00:49,735
this will change it into a square.

14
00:00:49,735 --> 00:00:53,535
Then, I did a center crop with 224 pixels.

15
00:00:53,535 --> 00:00:59,465
So, this crops a square out of the center of the image with 224 pixels on each side.

16
00:00:59,465 --> 00:01:04,285
Then, I convert it into a tensor which we can then use in our networks.

17
00:01:04,285 --> 00:01:06,080
With the transform defined,

18
00:01:06,080 --> 00:01:09,440
we can pass that into this image folder and along

19
00:01:09,440 --> 00:01:13,720
with the path to our dataset and that creates a dataset object.

20
00:01:13,720 --> 00:01:15,090
Then, with the dataset object,

21
00:01:15,090 --> 00:01:17,070
we can pass that to data loader.

22
00:01:17,070 --> 00:01:21,640
So, this will give us back a generator were we actually can get our images and labels.

23
00:01:21,640 --> 00:01:26,295
So, here, I just chose a batch size of 32 and this shuffle set to true.

24
00:01:26,295 --> 00:01:31,010
So, basically, every time you loop through the generator again like multiple times,

25
00:01:31,010 --> 00:01:32,325
every time you do that,

26
00:01:32,325 --> 00:01:36,010
it'll randomly shuffle the images and labels.

27
00:01:36,010 --> 00:01:37,860
So, that loaded, here's what it looks like.

28
00:01:37,860 --> 00:01:40,220
We have a nice little dogs now here.

29
00:01:40,220 --> 00:01:45,020
So, here, I had you define transforms for our training data and our testing data.

30
00:01:45,020 --> 00:01:46,730
So, like I was saying before,

31
00:01:46,730 --> 00:01:50,090
with training data, you typically want to do data augmentation.

32
00:01:50,090 --> 00:01:51,680
So, that means rotating it,

33
00:01:51,680 --> 00:01:53,690
resizing it, flipping it, et cetera,

34
00:01:53,690 --> 00:01:58,810
to create this simulated dataset of more images than we actually have.

35
00:01:58,810 --> 00:02:01,265
Firstly, it just gives you more data to actually train with.

36
00:02:01,265 --> 00:02:06,865
But secondly, it helps the network generalize to images that aren't in the training set.

37
00:02:06,865 --> 00:02:08,980
So, my transformations here,

38
00:02:08,980 --> 00:02:12,490
I first chose to do a random rotation with 30 degrees.

39
00:02:12,490 --> 00:02:15,140
So, this is going to rotate in either direction up to 30 degrees.

40
00:02:15,140 --> 00:02:17,890
Then, I did a random resize crop.

41
00:02:17,890 --> 00:02:21,545
So, this is going to randomly resize the image and then take

42
00:02:21,545 --> 00:02:26,000
a crop from the center of 224 pixels square.

43
00:02:26,000 --> 00:02:29,090
Then, after that crop, then it do a random horizontal flip.

44
00:02:29,090 --> 00:02:33,150
So, it's going to mirror it horizontally and change it to a tensor.

45
00:02:33,150 --> 00:02:36,500
Then, with the test transforms kind of the same as before resize

46
00:02:36,500 --> 00:02:40,205
it to 255 pixels and then do a center crop 224,

47
00:02:40,205 --> 00:02:42,155
and it finally change it to a tensor.

48
00:02:42,155 --> 00:02:45,860
Then, here with the train data and test data,

49
00:02:45,860 --> 00:02:51,560
we can pass our data directories and our transforms through this image folder.

50
00:02:51,560 --> 00:02:52,790
I should actually load the data,

51
00:02:52,790 --> 00:02:56,825
and then give our loaded data to our data loaders to actually get

52
00:02:56,825 --> 00:03:02,010
our load our datasets so that we can see data from the train loader,

53
00:03:02,010 --> 00:03:07,600
it looks like this, and we can see data from our test loader, so like that.

