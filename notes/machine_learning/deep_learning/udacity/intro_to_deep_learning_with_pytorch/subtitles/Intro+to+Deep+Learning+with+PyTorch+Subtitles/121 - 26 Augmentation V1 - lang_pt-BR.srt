1
00:00:00,003 --> 00:00:02,603
Para realizar o aumento
da imagem no PyTorch,

2
00:00:02,636 --> 00:00:06,511
usamos uma biblioteca
de transformação de imagem.

3
00:00:06,544 --> 00:00:11,132
Aqui podemos ver as transformações
da biblioteca transforms.

4
00:00:11,165 --> 00:00:14,570
Vemos transforms que mudam a imagem
da esquerda para a direita

5
00:00:14,603 --> 00:00:16,953
ou que recortam a imagem
de forma aleatória.

6
00:00:17,186 --> 00:00:20,270
No nosso caso, o conjunto de dados
será variante de rotação

7
00:00:20,303 --> 00:00:23,614
e de escala, assim optamos
pelo transforms Random,

8
00:00:23,647 --> 00:00:26,832
que muda a escala
e a rotação da imagem.

9
00:00:26,865 --> 00:00:29,064
Mostrarei como fazer isso
no código,

10
00:00:29,097 --> 00:00:32,088
e você poderá escolher
se irá usar isso no seu trabalho.

11
00:00:32,121 --> 00:00:35,527
Aumentarei os dados com os mesmos
passos de carregamento.

12
00:00:35,560 --> 00:00:38,744
Basicamente, eu adicionarei
ao transforms.Compose.

13
00:00:38,777 --> 00:00:42,248
Onde vimos conversões para tensor
e normalizações,

14
00:00:42,281 --> 00:00:44,879
também podemos colocar
outros tipos de transform.

15
00:00:44,912 --> 00:00:49,332
Essa transformação gira a imagem
no eixo horizontal,

16
00:00:49,365 --> 00:00:52,659
e este código rotaciona a imagem
em 10 graus.

17
00:00:52,692 --> 00:00:54,654
Eu aplico o transform
como de costume,

18
00:00:54,687 --> 00:00:57,319
quando formamos os dados
de treinamento e de teste.

19
00:00:57,352 --> 00:00:58,750
Só precisaremos fazer isso

20
00:00:58,783 --> 00:01:01,504
para atribuir uma variação
geométrica às imagens.

21
00:01:01,537 --> 00:01:05,562
Depois de transformar os dados,
sigo os passos de visualização.

22
00:01:06,289 --> 00:01:08,955
Ao observar as bordas
de algumas das imagens,

23
00:01:08,988 --> 00:01:12,412
vemos que algumas foram rotacionadas
para direita ou esquerda

24
00:01:12,445 --> 00:01:13,854
em 10 graus.

25
00:01:13,887 --> 00:01:17,974
Para ver se o aumento dos dados
melhorou o desempenho do modelo

26
00:01:18,007 --> 00:01:22,149
usamos a mesma rede convolucional
e loop que fizemos antes.

27
00:01:22,182 --> 00:01:24,046
Eu treino o modelo
com 30 epochs

28
00:01:24,079 --> 00:01:26,398
usando os dados de treinamento
aumentados.

29
00:01:26,431 --> 00:01:29,095
Nesse caso, a perda
de treinamento e de validação

30
00:01:29,128 --> 00:01:30,806
demorou um pouco
para diminuir,

31
00:01:30,839 --> 00:01:33,199
mas pode ter alcançado
um mínimo menor.

32
00:01:33,232 --> 00:01:36,206
Salvei o modelo aumentado
e, quando testei,

33
00:01:36,239 --> 00:01:39,455
obtive 1% a mais de precisão.

34
00:01:39,488 --> 00:01:41,966
Este é um aumento pequeno
de precisão de teste,

35
00:01:41,999 --> 00:01:44,399
mas as pequenas melhorias
podem ajudar

36
00:01:44,432 --> 00:01:48,717
e valem a pena quando buscamos
o melhor modelo para um teste.

37
00:01:48,750 --> 00:01:51,910
Em geral, no curso, seu trabalho
será desenvolver um modelo

38
00:01:51,943 --> 00:01:54,334
para alcançar a alta precisão,

39
00:01:54,367 --> 00:01:57,716
mas, além disso, escolhas
sobre aumento de dados

40
00:01:57,749 --> 00:01:59,883
e perda nas funções
de otimização

41
00:01:59,916 --> 00:02:01,660
podem ajudar muito,

42
00:02:01,693 --> 00:02:03,736
então esta será
uma habilidade útil.

