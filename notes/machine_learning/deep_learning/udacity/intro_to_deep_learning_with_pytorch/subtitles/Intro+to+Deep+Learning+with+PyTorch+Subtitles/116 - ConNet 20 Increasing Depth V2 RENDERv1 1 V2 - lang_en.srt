1
00:00:00,000 --> 00:00:04,470
In this lesson, we've investigated two new types of layers for neural networks.

2
00:00:04,470 --> 00:00:07,320
We began with convolutional layers which detect

3
00:00:07,320 --> 00:00:10,755
regional patterns in an image using a series of image filters.

4
00:00:10,755 --> 00:00:14,160
We've seen how typically a ReLu activation function is

5
00:00:14,160 --> 00:00:17,960
applied to the output of these filters to standardize their output values.

6
00:00:17,960 --> 00:00:20,435
Then, you learned about max pooling layers,

7
00:00:20,435 --> 00:00:25,185
which appear after convolutional layers to reduce the dimensionality of our input arrays.

8
00:00:25,185 --> 00:00:27,825
These new layers, along with fully-connected layers,

9
00:00:27,825 --> 00:00:28,935
that should be familiar,

10
00:00:28,935 --> 00:00:32,175
are often the only layers that you'll find in a CNN.

11
00:00:32,175 --> 00:00:34,350
In this video, we'll discuss how to arrange

12
00:00:34,350 --> 00:00:37,480
these layers to design a complete CNN architecture.

13
00:00:37,480 --> 00:00:40,765
We'll focus again on CNNs for image classification.

14
00:00:40,765 --> 00:00:44,735
In this case, our CNN must accept an image array as input.

15
00:00:44,735 --> 00:00:47,900
Now, if we're going to work with messy real-world images,

16
00:00:47,900 --> 00:00:50,360
there's a complication that we haven't yet discussed.

17
00:00:50,360 --> 00:00:53,715
If I go online and collect thousands or millions of images,

18
00:00:53,715 --> 00:00:57,155
well, it's pretty much guaranteed that they'll all be different sizes.

19
00:00:57,155 --> 00:01:02,265
Similar to MLPs, the CNNs we'll discuss will require a fixed size input.

20
00:01:02,265 --> 00:01:05,030
So, we'll have to pick an image size and resize all of

21
00:01:05,030 --> 00:01:08,615
our images to that same size before doing anything else.

22
00:01:08,615 --> 00:01:11,420
This is considered to be another pre-processing step,

23
00:01:11,420 --> 00:01:15,185
alongside normalization and conversion to a tensor datatype.

24
00:01:15,185 --> 00:01:19,070
It's very common to resize each image to be a square,

25
00:01:19,070 --> 00:01:21,740
with the spatial dimensions equal to a power of two,

26
00:01:21,740 --> 00:01:25,340
or else a number that's divisible by a large power of two.

27
00:01:25,340 --> 00:01:26,525
In the next few videos,

28
00:01:26,525 --> 00:01:29,240
we'll work with a dataset composed of images that have all

29
00:01:29,240 --> 00:01:32,360
been resized to 32 by 32 pixels.

30
00:01:32,360 --> 00:01:36,890
Recall that any image is interpreted by the computer as a three-dimensional array.

31
00:01:36,890 --> 00:01:41,120
Color images had some height and width in pixels along with red,

32
00:01:41,120 --> 00:01:45,150
green, and blue color channels corresponding to a depth of three.

33
00:01:45,150 --> 00:01:48,010
Grayscale images, while technically two-dimensional,

34
00:01:48,010 --> 00:01:52,590
can also be thought of as having their own width and height and a depth of one.

35
00:01:52,590 --> 00:01:54,110
For both of these cases,

36
00:01:54,110 --> 00:01:56,210
with color or grayscale images,

37
00:01:56,210 --> 00:02:00,065
the input array will always be much taller and wider than it is deep.

38
00:02:00,065 --> 00:02:03,560
Our CNN architecture will be designed with the goal of taking

39
00:02:03,560 --> 00:02:07,880
that array and gradually making it much deeper than it is tall or wide.

40
00:02:07,880 --> 00:02:10,340
Convolutional layers will be used to make

41
00:02:10,340 --> 00:02:12,920
the array deeper as it passes through the network,

42
00:02:12,920 --> 00:02:17,300
and max pooling layers will be used to decrease the XY dimensions.

43
00:02:17,300 --> 00:02:19,060
As the network gets deeper,

44
00:02:19,060 --> 00:02:21,950
it's actually extracting more and more complex patterns and

45
00:02:21,950 --> 00:02:25,995
features that help identify the content and the objects in an image,

46
00:02:25,995 --> 00:02:29,540
and it's actually discarding some spatial information about features

47
00:02:29,540 --> 00:02:33,870
like a smooth background and so on that do not help identify the image.

48
00:02:33,870 --> 00:02:35,965
To see how this works, next,

49
00:02:35,965 --> 00:02:39,700
let's go over a complete image classification CNN in detail.

