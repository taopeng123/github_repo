1
00:00:00,000 --> 00:00:04,690
Welcome to this lesson on using some really cool new features in Pytorch.

2
00:00:04,690 --> 00:00:09,570
So, this is specifically features that are being introduced and Pytorch 1.0.

3
00:00:09,570 --> 00:00:11,715
What they allow you to do is,

4
00:00:11,715 --> 00:00:16,260
export your train models and Pytorch that you've trained in Python,

5
00:00:16,260 --> 00:00:22,260
and export those to a version that you can then load up in C++.

6
00:00:22,260 --> 00:00:27,525
This is specifically useful for deploying your models in production.

7
00:00:27,525 --> 00:00:30,930
So, production environments tend do require

8
00:00:30,930 --> 00:00:34,440
very low latencies and strict deployment requirements.

9
00:00:34,440 --> 00:00:35,970
For the most part,

10
00:00:35,970 --> 00:00:38,385
these environments are built with C++.

11
00:00:38,385 --> 00:00:41,460
So, if you're going to deploy your model into production,

12
00:00:41,460 --> 00:00:44,885
for example maybe like as some mobile device

13
00:00:44,885 --> 00:00:49,220
or a Web App or an embedded system like a self-driving car,

14
00:00:49,220 --> 00:00:52,460
then typically your production environment is going to be in C++,

15
00:00:52,460 --> 00:00:55,670
and so you need to have your model in

16
00:00:55,670 --> 00:00:59,960
some format that is able to be loaded into that C++ environment.

17
00:00:59,960 --> 00:01:02,320
Now, in Pytorch 1.0,

18
00:01:02,320 --> 00:01:06,875
we have these new capabilities where we can convert our model which we've

19
00:01:06,875 --> 00:01:11,370
built and trained in Python into sort of an intermediate representation,

20
00:01:11,370 --> 00:01:14,650
that is enabled by this new thing called Torch Script.

21
00:01:14,650 --> 00:01:18,530
So, Torch Script is an intermediate representation that can

22
00:01:18,530 --> 00:01:22,475
be compiled and serialized by the Torch Script Compiler.

23
00:01:22,475 --> 00:01:29,910
So, the idea here is that you first develop and build your network in Python,

24
00:01:29,910 --> 00:01:32,240
and you train it there, and find

25
00:01:32,240 --> 00:01:35,360
the best hyperparameters and such like kind of that whole workflow.

26
00:01:35,360 --> 00:01:37,910
But when you're ready to deploy it,

27
00:01:37,910 --> 00:01:43,610
you will convert your Pytorch model into the Torch Script representation,

28
00:01:43,610 --> 00:01:47,645
from there you can compile it into a C++ representation.

29
00:01:47,645 --> 00:01:51,905
So, there are two ways of converting your Pytorch model to Torch Script.

30
00:01:51,905 --> 00:01:54,535
So, the first one is known as Tracing.

31
00:01:54,535 --> 00:01:58,520
So, the idea behind tracing is that you build your model,

32
00:01:58,520 --> 00:02:00,110
and then you pass

33
00:02:00,110 --> 00:02:04,850
some example data through your model like doing a forward pass through it.

34
00:02:04,850 --> 00:02:08,540
Behind the scenes what Pytorch is doing is it's keeping track

35
00:02:08,540 --> 00:02:12,400
of all the operations that are being performed on your input tensor.

36
00:02:12,400 --> 00:02:14,825
In this way, it can actually build

37
00:02:14,825 --> 00:02:18,410
this graph of operations that are being performed on your inputs.

38
00:02:18,410 --> 00:02:21,895
Then, once it has that graphic can convert it to Torch Script.

39
00:02:21,895 --> 00:02:26,930
To do this, you'll be using a new module called JIT, so torch.jit.

40
00:02:26,930 --> 00:02:29,605
So, JIT stands for Just In Time compiler.

41
00:02:29,605 --> 00:02:32,255
So, we have an example given here.

42
00:02:32,255 --> 00:02:37,640
So, we're going to be using an example model, so resnet18.

43
00:02:37,640 --> 00:02:41,750
This is a convolutional network used for classifying images.

44
00:02:41,750 --> 00:02:44,490
We can get this model just from torch vision.

45
00:02:44,490 --> 00:02:46,440
So, we'll just use this as an example.

46
00:02:46,440 --> 00:02:50,040
Since we have our model, so this can be anything

47
00:02:50,040 --> 00:02:54,020
you have built and trained yourself or this is just an example here,

48
00:02:54,020 --> 00:02:57,245
but this same code applies to anything you would build yourself.

49
00:02:57,245 --> 00:03:00,100
We need an example input.

50
00:03:00,100 --> 00:03:04,130
So, it doesn't really matter the actual values and the tensor itself.

51
00:03:04,130 --> 00:03:06,140
It just has to have the same shape or what you would

52
00:03:06,140 --> 00:03:09,190
normally pass through your model's forward method.

53
00:03:09,190 --> 00:03:12,270
So, in this case, resnet 18 is an image classifier.

54
00:03:12,270 --> 00:03:14,355
Right. So it expects images.

55
00:03:14,355 --> 00:03:17,860
So, in general, you would have some number of images per batch.

56
00:03:17,860 --> 00:03:20,015
So, here we're just going to use one image,

57
00:03:20,015 --> 00:03:22,295
three color channels, red, green, and blue,

58
00:03:22,295 --> 00:03:28,010
and then it typically accepts images of size 224 by 224.

59
00:03:28,010 --> 00:03:31,955
So, we could just construct a random tensor that has the shape,

60
00:03:31,955 --> 00:03:34,930
one by three by 224 by 224.

61
00:03:34,930 --> 00:03:40,530
Now, with our model and our example, we use torch.jit.trace.

62
00:03:40,530 --> 00:03:41,985
So, we pass in our model,

63
00:03:41,985 --> 00:03:43,305
and we pass in the example,

64
00:03:43,305 --> 00:03:46,380
and it returns to us a Script module.

65
00:03:46,380 --> 00:03:51,150
The Script module is this Torch Script representation.

66
00:03:51,150 --> 00:03:54,875
But you can use it exactly like a regular Pytorch model,

67
00:03:54,875 --> 00:03:58,490
so if you pass in a tensor like an image,

68
00:03:58,490 --> 00:04:03,600
it's going to give you the output that you would expect from a normal Pytorch module.

