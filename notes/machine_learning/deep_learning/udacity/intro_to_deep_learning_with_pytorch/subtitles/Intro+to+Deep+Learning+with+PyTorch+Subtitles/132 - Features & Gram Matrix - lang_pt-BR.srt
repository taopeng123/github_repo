1
00:00:00,106 --> 00:00:04,146
Se eu abrir o artigo original
e rolar até quase o final da página,

2
00:00:04,179 --> 00:00:05,642
vejo quais são as camadas

3
00:00:05,675 --> 00:00:08,505
que formam as representações
do estilo e do conteúdo.

4
00:00:08,538 --> 00:00:10,654
Vejo aqui
que a representação do conteúdo

5
00:00:10,687 --> 00:00:13,631
é extraída como o output
da camada conv4_2.

6
00:00:13,664 --> 00:00:16,572
E as representações do estilo
são feitas de características

7
00:00:16,605 --> 00:00:19,725
da 1ª camada convolucional
de todas as 5 pilhas,

8
00:00:19,758 --> 00:00:22,314
de conv1_1 a conv5_1.

9
00:00:22,347 --> 00:00:24,955
De volta ao notebook,
quero converter estes números

10
00:00:24,988 --> 00:00:29,278
que apontam para as 19 camadas VGG
para nomes mais descritivos.

11
00:00:29,311 --> 00:00:32,510
Então 0 é conv1_1,
que é bem fácil.

12
00:00:32,543 --> 00:00:35,731
Em seguida, após esta camada
max pooling, vem conv2_1,

13
00:00:35,764 --> 00:00:37,107
a camada de número 5.

14
00:00:37,140 --> 00:00:40,278
Eu encontro a camada max pooling
seguinte e, então, conv3_1,

15
00:00:40,311 --> 00:00:41,706
a camada 10.

16
00:00:41,739 --> 00:00:44,778
Eu também vou pegar
conv4_1 e conv4_2,

17
00:00:44,811 --> 00:00:46,989
para a representação
do conteúdo.

18
00:00:47,022 --> 00:00:50,169
Por último,
também pegarei conv5_1.

19
00:00:50,202 --> 00:00:51,845
Então, na função get_features,

20
00:00:51,878 --> 00:00:54,818
listei todas as camadas
de cujos outputs precisarei

21
00:00:54,851 --> 00:00:57,771
para formar as representações
do estilo e do conteúdo.

22
00:00:57,804 --> 00:01:00,037
Acho mais fácil deixar tudo
numa única lista

23
00:01:00,070 --> 00:01:01,878
e depois acessá-las por nome,

24
00:01:01,911 --> 00:01:03,560
mas você também pode separar

25
00:01:03,593 --> 00:01:05,706
esta camada
da representação do conteúdo.

26
00:01:06,084 --> 00:01:09,137
Ótimo. Agora a função get_features
está completa.

27
00:01:09,170 --> 00:01:12,231
No fim, uma de nossas tarefas será
passar uma imagem de estilo

28
00:01:12,264 --> 00:01:13,667
pelo modelo VGG

29
00:01:13,700 --> 00:01:16,244
e extrair as características
de estilo das camadas,

30
00:01:16,277 --> 00:01:18,094
que acabamos de especificar.

31
00:01:18,127 --> 00:01:21,076
Após obtermos as características
de uma camada específica,

32
00:01:21,109 --> 00:01:23,790
teremos que calcular
a matriz de Gram.

33
00:01:23,823 --> 00:01:27,583
O próximo exercício será completar
esta função gram_matrix.

34
00:01:27,994 --> 00:01:29,722
Esta função recebe um tensor,

35
00:01:29,755 --> 00:01:31,565
o output
de uma camada convolucional,

36
00:01:31,598 --> 00:01:33,345
e retorna uma matriz de Gram,

37
00:01:33,378 --> 00:01:36,433
as correlações de todas
as características dessa camada.

38
00:01:36,466 --> 00:01:37,824
Para completar esta função,

39
00:01:37,857 --> 00:01:40,997
veja a forma do tensor
que foi passado.

40
00:01:41,030 --> 00:01:42,759
O tensor deve ser
quadrimensional,

41
00:01:42,792 --> 00:01:45,884
com tamanho de lote, profundidade,
altura e largura.

42
00:01:45,917 --> 00:01:49,015
Você deve remodelá-lo,
para achatar a altura e a largura.

43
00:01:49,048 --> 00:01:52,986
Então pode calcular a matriz de Gram
através da multiplicação de matriz.

44
00:01:53,019 --> 00:01:56,343
Tente fazer isso, e a seguir
mostrarei uma implementação.

