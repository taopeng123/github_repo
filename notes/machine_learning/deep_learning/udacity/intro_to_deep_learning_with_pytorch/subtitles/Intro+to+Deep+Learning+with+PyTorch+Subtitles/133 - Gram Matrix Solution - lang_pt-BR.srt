1
00:00:00,114 --> 00:00:02,838
Esta é uma função gram_matrix
completa.

2
00:00:02,871 --> 00:00:04,020
Ela recebe um tensor,

3
00:00:04,053 --> 00:00:06,749
que será o output
de uma camada convolucional.

4
00:00:06,782 --> 00:00:09,487
A primeira coisa que vou fazer
é verificar o tamanho.

5
00:00:09,520 --> 00:00:11,548
Cada tensor será
quadrimensional,

6
00:00:11,581 --> 00:00:14,663
com tamanho de lote,
profundidade, altura e largura.

7
00:00:14,696 --> 00:00:16,532
Agora vou ignorar
o tamanho de lote,

8
00:00:16,565 --> 00:00:19,905
pois quero saber a profundidade,
ou número de mapas,

9
00:00:19,938 --> 00:00:21,421
e a altura e a largura.

10
00:00:21,454 --> 00:00:23,795
Estas dimensões são
tudo o que preciso saber

11
00:00:23,828 --> 00:00:25,684
para fatorar esse tensor.

12
00:00:25,717 --> 00:00:27,367
Depois vou remodelar
este tensor,

13
00:00:27,400 --> 00:00:31,301
para que ele seja uma forma 2-D
com uma dimensão espacial achatada.

14
00:00:31,334 --> 00:00:34,114
Ele retém o número de mapas
como número de linhas,

15
00:00:34,147 --> 00:00:37,201
então terá d linhas
por h vezes w colunas.

16
00:00:37,459 --> 00:00:39,433
Por fim,
calculo a matriz de Gram

17
00:00:39,466 --> 00:00:42,926
multiplicando a matriz deste tensor
por sua matriz transposta.

18
00:00:42,959 --> 00:00:45,178
Isso multiplica
todas as características

19
00:00:45,211 --> 00:00:46,912
e obtém as correlações.

20
00:00:46,945 --> 00:00:49,937
Finalmente, eu retorno
a matriz calculada.

21
00:00:50,129 --> 00:00:52,439
Em seguida, posso juntar
todas as partes.

22
00:00:52,472 --> 00:00:56,095
Já tenho a função get_features
e a função gram_matrix.

23
00:00:56,562 --> 00:00:59,192
E, antes de eu começar a formar
minha imagem-alvo,

24
00:00:59,225 --> 00:01:02,760
preciso extrair as características
das imagens de conteúdo e de estilo.

25
00:01:02,793 --> 00:01:05,846
Elas não vão mudar
durante este processo.

26
00:01:05,879 --> 00:01:08,667
Aqui chamei get_features
na imagem de conteúdo,

27
00:01:08,700 --> 00:01:11,473
passando a imagem de conteúdo
e o modelo VGG.

28
00:01:11,506 --> 00:01:13,859
Fiz o mesmo
para as características de estilo,

29
00:01:13,892 --> 00:01:17,013
passando a imagem de estilo
e o modelo VGG.

30
00:01:17,046 --> 00:01:19,486
Aqui eu calculei
todas as matrizes de Gram

31
00:01:19,519 --> 00:01:23,532
de cada camada de estilo,
de conv1_1 a conv5_1.

32
00:01:23,565 --> 00:01:26,015
Isso pega as camadas
das características de estilo

33
00:01:26,048 --> 00:01:27,880
e calcula a matriz de Gram.

34
00:01:27,913 --> 00:01:30,870
Depois retorna um dicionário
em que posso chamar style_grams

35
00:01:30,903 --> 00:01:32,000
com um nome de camada

36
00:01:32,033 --> 00:01:34,165
e obter a matriz de Gram
dessa camada.

37
00:01:34,198 --> 00:01:36,471
Em seguida, vou criar
uma imagem-alvo.

38
00:01:36,504 --> 00:01:39,398
Posso começar com uma tela
em branco, mas é mais fácil

39
00:01:39,431 --> 00:01:42,301
começar com uma cópia
da imagem de conteúdo.

40
00:01:42,334 --> 00:01:44,676
Assim, minha imagem não vai
se distanciar tanto

41
00:01:44,709 --> 00:01:46,212
do meu conteúdo polvo,

42
00:01:46,245 --> 00:01:48,697
e o meu plano será
iterar e mudar essa imagem

43
00:01:48,730 --> 00:01:51,069
para estilizá-la cada vez mais
depois.

44
00:01:51,102 --> 00:01:53,598
Como preparação
para mudar a imagem-alvo,

45
00:01:53,631 --> 00:01:56,080
definirei requires_grad
como True

46
00:01:56,113 --> 00:01:58,628
e mudarei para uma GPU,
se houver uma disponível.

47
00:01:58,661 --> 00:02:00,976
A parte seguinte é
a parte mais difícil,

48
00:02:01,009 --> 00:02:03,334
e a seguir veremos
como definir e calcular

49
00:02:03,367 --> 00:02:05,152
as perdas de estilo
e de conteúdo

50
00:02:05,185 --> 00:02:07,548
para criar
imagens-alvo interessantes.

