1
00:00:00,211 --> 00:00:02,969
Neste notebook,
mostrarei a implementação

2
00:00:03,002 --> 00:00:06,628
da transferência de estilo,
seguindo as instruções deste artigo,

3
00:00:06,661 --> 00:00:10,056
"Image Style Transfer Using
Convolutional Neural Networks".

4
00:00:10,089 --> 00:00:14,622
Usarei uma rede VGG-19 pré-treinada
como extrator de características.

5
00:00:14,655 --> 00:00:17,336
Podemos propagar
imagens individuais por esta rede,

6
00:00:17,369 --> 00:00:19,660
depois, em camadas específicas,
obter o output

7
00:00:19,693 --> 00:00:22,345
e calcular as representações
do conteúdo e do estilo

8
00:00:22,378 --> 00:00:23,569
de uma imagem.

9
00:00:23,602 --> 00:00:26,963
A transferência de estilo visa criar
uma nova imagem-alvo

10
00:00:26,996 --> 00:00:29,800
que tente retratar o conteúdo
de uma imagem de conteúdo

11
00:00:29,833 --> 00:00:32,282
e o estilo de uma determinada
imagem de estilo.

12
00:00:32,315 --> 00:00:35,342
Estas são as imagens de um gato
e de uma gravura de onda

13
00:00:35,375 --> 00:00:36,581
como exemplo.

14
00:00:36,614 --> 00:00:39,551
Mas, com o código deste notebook,
que está no nosso GitHub,

15
00:00:39,584 --> 00:00:41,715
você poderá carregar
suas próprias imagens

16
00:00:41,748 --> 00:00:44,290
e personalizar
sua imagem de alvo.

17
00:00:44,323 --> 00:00:45,740
Bom, uma coisa de cada vez.

18
00:00:45,773 --> 00:00:48,940
Carregarei as bibliotecas de sempre,
incluindo uma nova,

19
00:00:48,973 --> 00:00:50,989
a biblioteca de imagens PIL.

20
00:00:51,022 --> 00:00:54,079
Isso vai me ajudar a carregar
o tipo de imagem que eu quiser.

21
00:00:54,112 --> 00:00:57,630
Em seguida, vou carregar
a rede VGG-19 pré-treinada

22
00:00:57,663 --> 00:00:59,760
na qual esta implementação
se baseia.

23
00:00:59,793 --> 00:01:03,066
Usando os modelos do PyTorch,
posso carregar a rede pelo nome

24
00:01:03,099 --> 00:01:04,973
e definir que ela seja
pré-treinada.

25
00:01:05,006 --> 00:01:08,950
E vou carregar todas as camadas
convolucionais e de pooling,

26
00:01:08,983 --> 00:01:10,916
que, neste caso,
se chamam "features".

27
00:01:10,949 --> 00:01:12,950
Isso é algo peculiar
à rede VGG.

28
00:01:12,983 --> 00:01:16,323
Você fez algo parecido
na aula sobre transferência.

29
00:01:16,356 --> 00:01:19,718
Carregamos um modelo e congelamos
todos os pesos ou parâmetros

30
00:01:19,751 --> 00:01:21,440
que não queremos mudar.

31
00:01:21,473 --> 00:01:23,374
Então salvarei
este modelo pré-treinado

32
00:01:23,407 --> 00:01:27,848
e, para cada peso dessa rede,
definirei requires_grad como False.

33
00:01:27,881 --> 00:01:30,314
Isso significa
que nenhum destes pesos mudará.

34
00:01:30,347 --> 00:01:34,225
Agora a VGG se torna uma espécie
de extrator de características fixa,

35
00:01:34,258 --> 00:01:35,588
que é o que queremos

36
00:01:35,621 --> 00:01:37,985
para obter características
de conteúdo e estilo.

37
00:01:38,018 --> 00:01:41,338
A seguir, vou verificar se há
um dispositivo GPU disponível

38
00:01:41,371 --> 00:01:43,867
e, se houver, moverei
meu modelo para lá.

39
00:01:43,900 --> 00:01:46,687
E eu recomendo executar
este exemplo numa GPU

40
00:01:46,720 --> 00:01:49,915
para acelerar o processo de criação
da imagem-alvo.

41
00:01:49,948 --> 00:01:53,685
Isso vai imprimir o modelo VGG
e todas as suas camadas.

42
00:01:53,718 --> 00:01:56,531
Vemos que a sequência de camadas
está numerada.

43
00:01:56,564 --> 00:02:00,319
Esta é a 1ª camada convolucional
da 1ª pilha, conv1_1,

44
00:02:00,352 --> 00:02:02,012
cujo número é 0.

45
00:02:02,045 --> 00:02:06,002
Esta é a 2ª camada da 1ª pilha,
conv1_2, cujo rótulo é 2.

46
00:02:06,035 --> 00:02:10,189
Temos uma camada max pooling
e conv2_1 na 2ª pilha.

47
00:02:10,222 --> 00:02:14,002
Podemos continuar
até a última camada max pooling.

48
00:02:14,035 --> 00:02:16,652
Depois continuarei carregando
os recursos necessários

49
00:02:16,685 --> 00:02:18,636
para efetuar
a transferência de estilo.

50
00:02:18,669 --> 00:02:20,473
Bom, já tenho
o modelo VGG treinado

51
00:02:20,506 --> 00:02:23,744
e agora preciso carregar
minhas imagens de conteúdo e estilo.

52
00:02:23,777 --> 00:02:26,742
Esta é uma função
que transformará qualquer imagem

53
00:02:26,775 --> 00:02:29,003
numa imagem tensor
normalizada.

54
00:02:29,036 --> 00:02:31,193
Isto vai lidar
com imagens JPG ou PNG

55
00:02:31,226 --> 00:02:35,017
e assegurar que o tamanho seja
adequado para o nosso propósito.

56
00:02:35,050 --> 00:02:38,466
Depois vou carregar
imagens de conteúdo e de estilo

57
00:02:38,499 --> 00:02:40,173
a partir
do diretório de imagens.

58
00:02:40,206 --> 00:02:42,249
Também vou remodelar
a imagem de estilo

59
00:02:42,282 --> 00:02:44,915
para a mesma forma
da imagem de conteúdo.

60
00:02:44,948 --> 00:02:48,891
Esse passo vai apenas facilitar
os cálculos mais adiante.

61
00:02:48,924 --> 00:02:51,423
Esta função também me ajudará
a converter de volta

62
00:02:51,456 --> 00:02:55,491
uma imagem tensor normalizada
numa imagem NumPy para visualização.

63
00:02:55,524 --> 00:02:57,827
Vou mostrar as imagens
que eu escolhi.

64
00:02:57,860 --> 00:03:00,142
Escolhi um polvo
para a imagem de conteúdo

65
00:03:00,175 --> 00:03:02,964
e uma pintura de David Hockney
para a imagem de estilo.

66
00:03:02,997 --> 00:03:05,933
Gosto de usar pessoas ou bichos
para a imagem de conteúdo

67
00:03:05,966 --> 00:03:08,623
e pinturas bem vivas
para a imagem de estilo,

68
00:03:08,656 --> 00:03:10,945
mas, neste caso,
quem decide é você.

69
00:03:11,427 --> 00:03:14,841
Temos todos os elementos necessários
para a transferência de estilo.

70
00:03:14,874 --> 00:03:17,779
Em seguida, passarei
sua primeira tarefa.

71
00:03:17,812 --> 00:03:21,127
Sabemos que teremos que propagar
as imagens de conteúdo e de estilo

72
00:03:21,160 --> 00:03:22,960
pela rede VGG

73
00:03:22,993 --> 00:03:26,763
e extrair características de estilo
e conteúdo de camadas específicas.

74
00:03:26,796 --> 00:03:30,775
Então a sua tarefa será completar
esta função get_features.

75
00:03:30,808 --> 00:03:34,610
Esta função recebe uma imagem
e retorna os outputs das camadas

76
00:03:34,643 --> 00:03:38,139
que correspondem às representações
do conteúdo e do estilo.

77
00:03:38,172 --> 00:03:41,804
Esta é uma lista das características
extraídas de camadas específicas

78
00:03:41,837 --> 00:03:44,038
do nosso modelo VGG.

79
00:03:44,071 --> 00:03:45,809
Esta função está
quase completa,

80
00:03:45,842 --> 00:03:47,713
só precisa
de um dicionário descritivo

81
00:03:47,746 --> 00:03:52,687
que mapeie as 19 camadas do VGG,
atualmente numeradas de 0 a 36,

82
00:03:52,720 --> 00:03:56,228
com nomes como conv1_1,
conv2_1 e assim por diante.

83
00:03:56,261 --> 00:03:59,534
Eu forneci a 1ª camada do modelo
como ponto de partida.

84
00:03:59,567 --> 00:04:01,240
Se não souber
quais são as camadas

85
00:04:01,273 --> 00:04:04,490
que formam as representações
do conteúdo e estilo de uma imagem,

86
00:04:04,523 --> 00:04:06,425
dê uma olhada
no artigo original

87
00:04:06,458 --> 00:04:08,626
e identifique as camadas
de que precisamos.

88
00:04:08,659 --> 00:04:10,519
Depois liste todas aqui.

89
00:04:10,552 --> 00:04:13,104
E, se ficar empacado
ou não souber por onde começar,

90
00:04:13,137 --> 00:04:15,274
mostrarei minha solução
no próximo vídeo.

