1
00:00:00,000 --> 00:00:02,320
All right, here's my final solution.

2
00:00:02,320 --> 00:00:07,185
I played around with the values for style_weights giving more weight to earlier layers.

3
00:00:07,185 --> 00:00:11,625
I left the content and style_weights at one and one times 10_6.

4
00:00:11,625 --> 00:00:14,310
Then I got into the iteration loop.

5
00:00:14,310 --> 00:00:18,130
I first got a list of target features using our get_features function.

6
00:00:18,130 --> 00:00:21,820
Then I defined our content loss by looking at the target_features at

7
00:00:21,820 --> 00:00:25,755
the layer conv4_2 and the content_features at conv4_2.

8
00:00:25,755 --> 00:00:30,575
So, I'm comparing my content image and my target image content representations.

9
00:00:30,575 --> 00:00:34,635
I found the distance between the two and calculated the mean squared difference.

10
00:00:34,635 --> 00:00:37,370
Then the style_loss. For this one,

11
00:00:37,370 --> 00:00:39,955
I looked at every layer in our style_weights dictionary.

12
00:00:39,955 --> 00:00:41,425
For each of these layers,

13
00:00:41,425 --> 00:00:43,690
I got the target_feature at that layer.

14
00:00:43,690 --> 00:00:47,060
For example, this would be what happens if our target image goes

15
00:00:47,060 --> 00:00:50,970
through our VGG 19 Network and hits conv1_1.

16
00:00:50,970 --> 00:00:55,675
The output of the convolutional layer is then fed into our gram_matrix function.

17
00:00:55,675 --> 00:00:58,585
This gives us our target gram_matrix.

18
00:00:58,585 --> 00:01:03,110
Earlier, I calculated a dictionary of gram matrices for our style image.

19
00:01:03,110 --> 00:01:07,425
So, I get the gram_matrix for our style image by accessing that by layer.

20
00:01:07,425 --> 00:01:09,830
Then here, I'm calculating the mean squared difference

21
00:01:09,830 --> 00:01:12,545
between our style_gram and target_gram matrix.

22
00:01:12,545 --> 00:01:15,395
Again, this is for a particular layer and I weighted

23
00:01:15,395 --> 00:01:18,610
by the weights that I specified in our style_weights dictionary.

24
00:01:18,610 --> 00:01:21,525
So, for example, for the first layer conv1_1,

25
00:01:21,525 --> 00:01:26,080
I'm going to multiply the difference between the target and style_gram matrices by one.

26
00:01:26,080 --> 00:01:28,650
Then I'm adding that layer style_loss to

27
00:01:28,650 --> 00:01:32,765
our accumulated style_loss and just dividing it by the size of that layer.

28
00:01:32,765 --> 00:01:36,335
This effectively normalizes our layer style_loss.

29
00:01:36,335 --> 00:01:38,220
So, by the end of this for loop,

30
00:01:38,220 --> 00:01:42,920
I have the value for this style_loss at all five of my convolutional layers added up.

31
00:01:42,920 --> 00:01:45,355
Finally, I can compute the total_loss,

32
00:01:45,355 --> 00:01:47,870
which is just my content_loss and style_loss

33
00:01:47,870 --> 00:01:51,165
summed up and multiplied by their respective weights.

34
00:01:51,165 --> 00:01:54,440
Our content_loss is multiplied by one and style is

35
00:01:54,440 --> 00:01:58,200
multiplied by one times 10_6, and that's basically it.

36
00:01:58,200 --> 00:02:00,410
I run this loop for 2,000 iterations,

37
00:02:00,410 --> 00:02:03,100
but I showed intermittently images every 400.

38
00:02:03,100 --> 00:02:04,890
I printed out the loss,

39
00:02:04,890 --> 00:02:06,125
which was quite large,

40
00:02:06,125 --> 00:02:09,510
and I could see a difference in my octopus image right away.

41
00:02:09,510 --> 00:02:12,140
Then at the end of my 2,000 iterations,

42
00:02:12,140 --> 00:02:15,475
I displayed my content and my target image side-by-side.

43
00:02:15,475 --> 00:02:19,144
You can see that the target image still looks a lot like an octopus.

44
00:02:19,144 --> 00:02:21,890
In fact, I think I could have stylized this even more.

45
00:02:21,890 --> 00:02:23,660
But it also has the colors and

46
00:02:23,660 --> 00:02:28,055
some brushstroke texture from the Hockney painting that I used as a style image.

47
00:02:28,055 --> 00:02:29,340
Now, using this notebook,

48
00:02:29,340 --> 00:02:33,585
you should be able to choose any content and style image combo that you want.

49
00:02:33,585 --> 00:02:37,849
Some example images have been provided in this notebook folder for you,

50
00:02:37,849 --> 00:02:39,675
but if you run this in a local environment,

51
00:02:39,675 --> 00:02:41,570
you can combine any images.

52
00:02:41,570 --> 00:02:44,085
If you do end up making your own images,

53
00:02:44,085 --> 00:02:46,520
I'd encourage you to share it on social media.

54
00:02:46,520 --> 00:02:48,270
I know that I would love to see it.

